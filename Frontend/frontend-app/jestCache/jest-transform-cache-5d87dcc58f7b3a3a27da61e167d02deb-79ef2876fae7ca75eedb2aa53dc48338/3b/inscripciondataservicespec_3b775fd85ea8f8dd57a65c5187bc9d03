fea0066a0643acdaf4642bb22ca34a3a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const inscripciondata_service_1 = require("./inscripciondata.service");
describe('InscriptionDataService', () => {
    let service;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            providers: [inscripciondata_service_1.InscriptionDataService]
        });
        service = testing_1.TestBed.inject(inscripciondata_service_1.InscriptionDataService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify(); // Ensure that there are no outstanding requests.
    });
    it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {
        // Arrange
        const student_id = '123';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'InscripciÃ³n creada exitosamente', data: {} };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        expect(req.request.body.data).not.toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should throw an error when student_id parameter is missing', () => {
        // Arrange
        const course_id = '2';
        const inscription_date = '2021-01-01';
        const expectedResponse = {}; // Replace with your expected response.
        // Act
        const result$ = service.addInscription('', course_id, inscription_date);
        // Assert
        result$.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        req.flush(expectedResponse);
    });
    it('should throw an error when course_id parameter is missing', () => {
        // Arrange
        const student_id = '2';
        const inscription_date = '2021-01-01';
        const expectedResponse = {}; // Replace with your expected response.
        // Act
        const result$ = service.addInscription(student_id, '', inscription_date);
        // Assert
        result$.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        req.flush(expectedResponse);
    });
    it('should throw an error when date is missing', () => {
        // Arrange
        const student_id = '2';
        const course_id = '4';
        const expectedResponse = {}; // Replace with your expected response.
        // Act
        const result$ = service.addInscription(student_id, course_id, '');
        // Assert
        result$.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        req.flush(expectedResponse);
    });
    it('should return an Observable with the expected inscription data when a valid student_id is provided', () => {
        // Arrange
        const student_id = 'valid_student_id';
        const expectedResponse = { /* your expected response here */};
        // Act
        const result$ = service.getInscriptionByStudentId(student_id);
        // Assert
        result$.subscribe(response => {
            expect(response).toEqual(expectedResponse);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('GET');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should throw an error if the API call fails', () => {
        // Arrange
        const student_id = '123';
        const mockErrorResponse = { status: 500, statusText: 'Server Error' };
        const data = 'Invalid request';
        // Act
        const result = service.getInscriptionByStudentId(student_id);
        // Assert
        result.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('GET');
        req.flush(data, mockErrorResponse); // Simulate a server error response.
    });
    it('should send a DELETE request to the correct API endpoint with the given inscription ID', () => {
        // Arrange
        const inscID = '123';
        const expectedResponse = { message: 'Inscripcion Eliminada' };
        // Act
        const result$ = service.deleteInscriptionById(inscID);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should handle and return an observable with an error message when inscID parameter is null or undefined', () => {
        // Arrange
        const inscID = '';
        const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
        const data = 'inscID parameter is null or undefined';
        // Act
        const result = service.deleteInscriptionById(inscID);
        // Assert
        result.subscribe({
            error: err => {
                expect(err).toBeDefined();
                expect(err.error).toEqual(data);
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(data, mockErrorResponse); // Simulate a server error response.
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcc2VydmljZXNcXGluc2NyaXBjaW9uZGF0YS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBQzlGLHVFQUFtRTtBQUVuRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLFFBQStCLENBQUM7SUFHcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsU0FBUyxFQUFFLENBQUMsZ0RBQXNCLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdEQUFzQixDQUFDLENBQUM7UUFDakQsUUFBUSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsaURBQWlEO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtHQUFrRyxFQUFFLEdBQUcsRUFBRTtRQUMxRyxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUVsRixNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFaEYsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztJQUN0RSxDQUFDLENBQUMsQ0FBQztJQUNILEVBQUUsQ0FBQyw0REFBNEQsRUFBRSxHQUFHLEVBQUU7UUFDcEUsVUFBVTtRQUNWLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUN0QixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUN0QyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLHVDQUF1QztRQUVwRSxNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBRSxFQUFFLEVBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFeEUsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDZCxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzlCLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO1FBQ25FLFVBQVU7UUFDVixNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUM7UUFDdkIsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUM7UUFDdEMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsQ0FBQyx1Q0FBdUM7UUFFcEUsTUFBTTtRQUNOLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXpFLFNBQVM7UUFDVCxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ2QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QixDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUN0QixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLHVDQUF1QztRQUVwRSxNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxFLFNBQVM7UUFDVCxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ2QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QixDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUQsRUFBRSxDQUFDLG9HQUFvRyxFQUFFLEdBQUcsRUFBRTtRQUM5RyxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUM7UUFDdEMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLGlDQUFpQyxDQUFFLENBQUM7UUFFL0QsTUFBTTtRQUNOLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5RCxTQUFTO1FBQ1QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1FBQ3JELFVBQVU7UUFDVixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDekIsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxDQUFDO1FBQ3RFLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBRS9CLE1BQU07UUFDTixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFN0QsU0FBUztRQUNULE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDZixLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzVCLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO0lBQzFFLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLHdGQUF3RixFQUFFLEdBQUcsRUFBRTtRQUNoRyxVQUFVO1FBQ1YsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUMsQ0FBQTtRQUU1RCxNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRELFNBQVM7UUFDVCxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsNkNBQTZDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlHQUF5RyxFQUFFLEdBQUcsRUFBRTtRQUNqSCxVQUFVO1FBQ1YsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsQ0FBQztRQUNyRSxNQUFNLElBQUksR0FBRyx1Q0FBdUMsQ0FBQztRQUVyRCxNQUFNO1FBQ04sTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJELFNBQVM7UUFDVCxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ2YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxvQ0FBb0M7SUFDMUUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEp1bGnDoW5cXERlc2t0b3BcXGZyb250XFxmcm9udGVuZC1hcHBcXHNyY1xcYXBwXFxzZXJ2aWNlc1xcaW5zY3JpcGNpb25kYXRhLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XHJcbmltcG9ydCB7IEluc2NyaXB0aW9uRGF0YVNlcnZpY2UgfSBmcm9tICcuL2luc2NyaXBjaW9uZGF0YS5zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlJywgKCkgPT4ge1xyXG4gIGxldCBzZXJ2aWNlOiBJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlO1xyXG4gIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xyXG4gIFxyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXHJcbiAgICAgIHByb3ZpZGVyczogW0luc2NyaXB0aW9uRGF0YVNlcnZpY2VdXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEluc2NyaXB0aW9uRGF0YVNlcnZpY2UpO1xyXG4gICAgaHR0cE1vY2sgPSBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpO1xyXG4gIH0pO1xyXG5cclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgaHR0cE1vY2sudmVyaWZ5KCk7IC8vIEVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cy5cclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBhZGQgYSBuZXcgaW5zY3JpcHRpb24gd2hlbiB2YWxpZCBzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGFuZCBpbnNjcmlwdGlvbl9kYXRlIGFyZSBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIC8vIEFycmFuZ2VcclxuICAgIGNvbnN0IHN0dWRlbnRfaWQgPSAnMTIzJztcclxuICAgIGNvbnN0IGNvdXJzZV9pZCA9ICc0NTYnO1xyXG4gICAgY29uc3QgaW5zY3JpcHRpb25fZGF0ZSA9ICcyMDI0LTAzLTEzJztcclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0geyBzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGluc2NyaXB0aW9uX2RhdGUgfTtcclxuICAgIGNvbnN0IGV4cGVjdGVkUmVzcG9uc2UgPSB7IG1lc3NhZ2U6ICdJbnNjcmlwY2nDs24gY3JlYWRhIGV4aXRvc2FtZW50ZScsIGRhdGE6IHt9IH07XHJcblxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2VydmljZS5hZGRJbnNjcmlwdGlvbihzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGluc2NyaXB0aW9uX2RhdGUpO1xyXG5cclxuICAgIC8vIEFzc2VydFxyXG4gICAgcmVzdWx0JC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5tZXNzYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoKCkgPT4gdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QubWV0aG9kKS50b0JlKCdQT1NUJyk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QuYm9keS5kYXRhKS5ub3QudG9CZU51bGwoKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgLy8gU2ltdWxhdGUgYSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHN0dWRlbnRfaWQgcGFyYW1ldGVyIGlzIG1pc3NpbmcnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBjb3Vyc2VfaWQgPSAnMic7XHJcbiAgICBjb25zdCBpbnNjcmlwdGlvbl9kYXRlID0gJzIwMjEtMDEtMDEnO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHt9OyAvLyBSZXBsYWNlIHdpdGggeW91ciBleHBlY3RlZCByZXNwb25zZS5cclxuXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmFkZEluc2NyaXB0aW9uKCAnJyxjb3Vyc2VfaWQsIGluc2NyaXB0aW9uX2RhdGUpO1xyXG5cclxuICAgIC8vIEFzc2VydFxyXG4gICAgcmVzdWx0JC5zdWJzY3JpYmUoe1xyXG4gICAgICAgIGVycm9yOiBlcnIgPT4ge1xyXG4gICAgICAgICAgICBleHBlY3QoZXJyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSgoKSA9PiB0cnVlKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ1BPU1QnKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgXHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBjb3Vyc2VfaWQgcGFyYW1ldGVyIGlzIG1pc3NpbmcnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBzdHVkZW50X2lkID0gJzInO1xyXG4gICAgY29uc3QgaW5zY3JpcHRpb25fZGF0ZSA9ICcyMDIxLTAxLTAxJztcclxuICAgIGNvbnN0IGV4cGVjdGVkUmVzcG9uc2UgPSB7fTsgLy8gUmVwbGFjZSB3aXRoIHlvdXIgZXhwZWN0ZWQgcmVzcG9uc2UuXHJcblxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2VydmljZS5hZGRJbnNjcmlwdGlvbihzdHVkZW50X2lkLCAnJywgaW5zY3JpcHRpb25fZGF0ZSk7XHJcblxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZSh7XHJcbiAgICAgICAgZXJyb3I6IGVyciA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKCgpID0+IHRydWUpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyBcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGRhdGUgaXMgbWlzc2luZycsICgpID0+IHtcclxuICAgIC8vIEFycmFuZ2VcclxuICAgIGNvbnN0IHN0dWRlbnRfaWQgPSAnMic7XHJcbiAgICBjb25zdCBjb3Vyc2VfaWQgPSAnNCc7XHJcbiAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0ge307IC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGV4cGVjdGVkIHJlc3BvbnNlLlxyXG5cclxuICAgIC8vIEFjdFxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNlcnZpY2UuYWRkSW5zY3JpcHRpb24oc3R1ZGVudF9pZCwgY291cnNlX2lkLCAnJyk7XHJcblxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZSh7XHJcbiAgICAgICAgZXJyb3I6IGVyciA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKCgpID0+IHRydWUpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyBcclxuICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBPYnNlcnZhYmxlIHdpdGggdGhlIGV4cGVjdGVkIGluc2NyaXB0aW9uIGRhdGEgd2hlbiBhIHZhbGlkIHN0dWRlbnRfaWQgaXMgcHJvdmlkZWQnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBzdHVkZW50X2lkID0gJ3ZhbGlkX3N0dWRlbnRfaWQnO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHsgLyogeW91ciBleHBlY3RlZCByZXNwb25zZSBoZXJlICovIH07XHJcbiAgXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmdldEluc2NyaXB0aW9uQnlTdHVkZW50SWQoc3R1ZGVudF9pZCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoKCkgPT4gdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QubWV0aG9kKS50b0JlKCdHRVQnKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgLy8gUHJvdmlkZSBhIG1vY2tlZCByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3QuXHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIEFQSSBjYWxsIGZhaWxzJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3Qgc3R1ZGVudF9pZCA9ICcxMjMnO1xyXG4gICAgY29uc3QgbW9ja0Vycm9yUmVzcG9uc2UgPSB7IHN0YXR1czogNTAwLCBzdGF0dXNUZXh0OiAnU2VydmVyIEVycm9yJyB9O1xyXG4gICAgY29uc3QgZGF0YSA9ICdJbnZhbGlkIHJlcXVlc3QnO1xyXG4gIFxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQgPSBzZXJ2aWNlLmdldEluc2NyaXB0aW9uQnlTdHVkZW50SWQoc3R1ZGVudF9pZCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdC5zdWJzY3JpYmUoe1xyXG4gICAgICBlcnJvcjogZXJyID0+IHtcclxuICAgICAgICBleHBlY3QoZXJyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICBcclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSgoKSA9PiB0cnVlKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ0dFVCcpO1xyXG4gICAgcmVxLmZsdXNoKGRhdGEsIG1vY2tFcnJvclJlc3BvbnNlKTsgLy8gU2ltdWxhdGUgYSBzZXJ2ZXIgZXJyb3IgcmVzcG9uc2UuXHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCBzZW5kIGEgREVMRVRFIHJlcXVlc3QgdG8gdGhlIGNvcnJlY3QgQVBJIGVuZHBvaW50IHdpdGggdGhlIGdpdmVuIGluc2NyaXB0aW9uIElEJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3QgaW5zY0lEID0gJzEyMyc7XHJcbiAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0geyBtZXNzYWdlOiAnSW5zY3JpcGNpb24gRWxpbWluYWRhJ31cclxuICBcclxuICAgIC8vIEFjdFxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNlcnZpY2UuZGVsZXRlSW5zY3JpcHRpb25CeUlkKGluc2NJRCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBleHBlY3QocmVzcG9uc2UubWVzc2FnZSkudG9FcXVhbChleHBlY3RlZFJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoKCkgPT4gdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QubWV0aG9kKS50b0JlKCdERUxFVEUnKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgLy8gUHJvdmlkZSBhIG1vY2tlZCByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3QuXHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGFuZGxlIGFuZCByZXR1cm4gYW4gb2JzZXJ2YWJsZSB3aXRoIGFuIGVycm9yIG1lc3NhZ2Ugd2hlbiBpbnNjSUQgcGFyYW1ldGVyIGlzIG51bGwgb3IgdW5kZWZpbmVkJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3QgaW5zY0lEID0gJyc7XHJcbiAgICBjb25zdCBtb2NrRXJyb3JSZXNwb25zZSA9IHsgc3RhdHVzOiA0MDAsIHN0YXR1c1RleHQ6ICdCYWQgUmVxdWVzdCcgfTtcclxuICAgIGNvbnN0IGRhdGEgPSAnaW5zY0lEIHBhcmFtZXRlciBpcyBudWxsIG9yIHVuZGVmaW5lZCc7XHJcbiAgXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2UuZGVsZXRlSW5zY3JpcHRpb25CeUlkKGluc2NJRCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdC5zdWJzY3JpYmUoe1xyXG4gICAgICBlcnJvcjogZXJyID0+IHtcclxuICAgICAgICBleHBlY3QoZXJyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIGV4cGVjdChlcnIuZXJyb3IpLnRvRXF1YWwoZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIFxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKCgpID0+IHRydWUpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnREVMRVRFJyk7XHJcbiAgICByZXEuZmx1c2goZGF0YSwgbW9ja0Vycm9yUmVzcG9uc2UpOyAvLyBTaW11bGF0ZSBhIHNlcnZlciBlcnJvciByZXNwb25zZS5cclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9