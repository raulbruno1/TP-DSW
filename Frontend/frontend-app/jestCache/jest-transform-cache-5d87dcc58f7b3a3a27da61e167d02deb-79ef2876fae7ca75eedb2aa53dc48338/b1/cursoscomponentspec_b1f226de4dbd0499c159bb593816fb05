b20d0249713dde91368ff72944f7cbe3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const cursos_component_1 = require("./cursos.component");
const materiadata_service_mock_1 = require("src/app/mocks/materiadata.service.mock");
const materiadata_service_1 = require("src/app/services/materiadata.service");
const dialog_service_mock_1 = require("src/app/mocks/dialog.service.mock");
const dialog_service_1 = require("src/app/services/dialog.service");
const index_js_1 = require("@angular/common/http/index.js");
const httpMock = { get: jest.fn() };
describe('CursosComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [cursos_component_1.CursosComponent],
            providers: [{ provide: materiadata_service_1.CoursedataService, useClass: materiadata_service_mock_1.CoursedataServiceMock },
                { provide: dialog_service_1.DialogService, useClass: dialog_service_mock_1.DialogServiceMock },
                { provide: index_js_1.HttpClient, useValue: httpMock }]
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(cursos_component_1.CursosComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should have "all" as the default selected category', () => {
        expect(component.selected_category).toEqual('all');
    });
    it('should filter courses by category', () => {
        const category = 'math';
        component.filterByCategory(category);
        expect(component.courses).toEqual(component.original_courses.filter((course) => course.category === category));
    });
    it('should show all courses when ShowAll is called', () => {
        component.ShowAll();
        expect(component.courses).toEqual(component.original_courses);
    });
    it('should reset selected category and courses when restart is called', () => {
        component.restart();
        expect(component.selected_category).toEqual('all');
        expect(component.courses).toEqual(component.original_courses);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcY29tcG9uZW50c1xcY3Vyc29zXFxjdXJzb3MuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0U7QUFDbEUseURBQXFEO0FBQ3JELHFGQUErRTtBQUMvRSw4RUFBeUU7QUFDekUsMkVBQXNFO0FBQ3RFLG9FQUFnRTtBQUNoRSw0REFBMkQ7QUFFM0QsTUFBTSxRQUFRLEdBQUcsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFFbEMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLFNBQTBCLENBQUM7SUFDL0IsSUFBSSxPQUEwQyxDQUFDO0lBRS9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGtDQUFlLENBQUM7WUFDL0IsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsdUNBQWlCLEVBQUUsUUFBUSxFQUFFLGdEQUFxQixFQUFDO2dCQUM3RCxFQUFDLE9BQU8sRUFBRSw4QkFBYSxFQUFFLFFBQVEsRUFBRSx1Q0FBaUIsRUFBQztnQkFDdkQsRUFBQyxPQUFPLEVBQUUscUJBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUM7U0FDckQsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGtDQUFlLENBQUMsQ0FBQztRQUNuRCxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7UUFDNUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBNkIsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3hJLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtRQUN4RCxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1FBQzNFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcY29tcG9uZW50c1xcY3Vyc29zXFxjdXJzb3MuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IEN1cnNvc0NvbXBvbmVudCB9IGZyb20gJy4vY3Vyc29zLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvdXJzZWRhdGFTZXJ2aWNlTW9jayB9IGZyb20gJ3NyYy9hcHAvbW9ja3MvbWF0ZXJpYWRhdGEuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgQ291cnNlZGF0YVNlcnZpY2UgfSBmcm9tICdzcmMvYXBwL3NlcnZpY2VzL21hdGVyaWFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlTW9jayB9IGZyb20gJ3NyYy9hcHAvbW9ja3MvZGlhbG9nLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdzcmMvYXBwL3NlcnZpY2VzL2RpYWxvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL2luZGV4LmpzJztcclxuXHJcbmNvbnN0IGh0dHBNb2NrID0ge2dldDogamVzdC5mbigpfTtcclxuXHJcbmRlc2NyaWJlKCdDdXJzb3NDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgbGV0IGNvbXBvbmVudDogQ3Vyc29zQ29tcG9uZW50O1xyXG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEN1cnNvc0NvbXBvbmVudD47XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgZGVjbGFyYXRpb25zOiBbQ3Vyc29zQ29tcG9uZW50XSxcclxuICAgICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENvdXJzZWRhdGFTZXJ2aWNlLCB1c2VDbGFzczogQ291cnNlZGF0YVNlcnZpY2VNb2NrfSxcclxuICAgICAgICAgICAgICAgICAge3Byb3ZpZGU6IERpYWxvZ1NlcnZpY2UsIHVzZUNsYXNzOiBEaWFsb2dTZXJ2aWNlTW9ja30sXHJcbiAgICAgICAgICAgICAgICB7cHJvdmlkZTogSHR0cENsaWVudCwgdXNlVmFsdWU6IGh0dHBNb2NrfV1cclxuICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XHJcbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoQ3Vyc29zQ29tcG9uZW50KTtcclxuICAgIGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBjcmVhdGUnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoY29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGF2ZSBcImFsbFwiIGFzIHRoZSBkZWZhdWx0IHNlbGVjdGVkIGNhdGVnb3J5JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5zZWxlY3RlZF9jYXRlZ29yeSkudG9FcXVhbCgnYWxsJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgZmlsdGVyIGNvdXJzZXMgYnkgY2F0ZWdvcnknLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjYXRlZ29yeSA9ICdtYXRoJztcclxuICAgIGNvbXBvbmVudC5maWx0ZXJCeUNhdGVnb3J5KGNhdGVnb3J5KTtcclxuICAgIGV4cGVjdChjb21wb25lbnQuY291cnNlcykudG9FcXVhbChjb21wb25lbnQub3JpZ2luYWxfY291cnNlcy5maWx0ZXIoKGNvdXJzZTogeyBjYXRlZ29yeTogc3RyaW5nOyB9KSA9PiBjb3Vyc2UuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgc2hvdyBhbGwgY291cnNlcyB3aGVuIFNob3dBbGwgaXMgY2FsbGVkJywgKCkgPT4ge1xyXG4gICAgY29tcG9uZW50LlNob3dBbGwoKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQuY291cnNlcykudG9FcXVhbChjb21wb25lbnQub3JpZ2luYWxfY291cnNlcyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcmVzZXQgc2VsZWN0ZWQgY2F0ZWdvcnkgYW5kIGNvdXJzZXMgd2hlbiByZXN0YXJ0IGlzIGNhbGxlZCcsICgpID0+IHtcclxuICAgIGNvbXBvbmVudC5yZXN0YXJ0KCk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LnNlbGVjdGVkX2NhdGVnb3J5KS50b0VxdWFsKCdhbGwnKTtcclxuICAgIGV4cGVjdChjb21wb25lbnQuY291cnNlcykudG9FcXVhbChjb21wb25lbnQub3JpZ2luYWxfY291cnNlcyk7XHJcbiAgfSk7XHJcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==