7431111575b185fac67ced1446b509e1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const inscripciondata_service_1 = require("./inscripciondata.service");
describe('InscriptionDataService', () => {
    let service;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            providers: [inscripciondata_service_1.InscriptionDataService]
        });
        service = testing_1.TestBed.inject(inscripciondata_service_1.InscriptionDataService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify(); // Ensure that there are no outstanding requests.
    });
    it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {
        // Arrange
        const student_id = '123';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'InscripciÃ³n creada exitosamente', data: {} };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        expect(req.request.body.data).not.toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should throw an error when student_id parameter is missing', () => {
        // Arrange
        const course_id = '2';
        const inscription_date = '2021-01-01';
        const expectedResponse = {}; // Replace with your expected response.
        // Act
        const result$ = service.addInscription('', course_id, inscription_date);
        // Assert
        result$.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        req.flush(expectedResponse);
    });
    it('should return an Observable with the expected inscription data when a valid student_id is provided', () => {
        // Arrange
        const student_id = 'valid_student_id';
        const expectedResponse = { /* your expected response here */};
        // Act
        const result$ = service.getInscriptionByStudentId(student_id);
        // Assert
        result$.subscribe(response => {
            expect(response).toEqual(expectedResponse);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('GET');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should throw an error if the API call fails', () => {
        // Arrange
        const student_id = '123';
        const mockErrorResponse = { status: 500, statusText: 'Server Error' };
        const data = 'Invalid request';
        // Act
        const result = service.getInscriptionByStudentId(student_id);
        // Assert
        result.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('GET');
        req.flush(data, mockErrorResponse); // Simulate a server error response.
    });
    it('should send a DELETE request to the correct API endpoint with the given inscription ID', () => {
        // Arrange
        const inscID = '123';
        const expectedResponse = { message: 'Inscripcion Eliminada' };
        // Act
        const result$ = service.deleteInscriptionById(inscID);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should handle and return an observable with an error message when inscID parameter is null or undefined', () => {
        // Arrange
        const inscID = '';
        const mockErrorResponse = { status: 400, statusText: 'Bad Request' };
        const data = 'inscID parameter is null or undefined';
        // Act
        const result = service.deleteInscriptionById(inscID);
        // Assert
        result.subscribe({
            error: err => {
                expect(err).toBeDefined();
                expect(err.error).toEqual(data);
            }
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(data, mockErrorResponse); // Simulate a server error response.
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcc2VydmljZXNcXGluc2NyaXBjaW9uZGF0YS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBQzlGLHVFQUFtRTtBQUVuRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLFFBQStCLENBQUM7SUFHcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsU0FBUyxFQUFFLENBQUMsZ0RBQXNCLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdEQUFzQixDQUFDLENBQUM7UUFDakQsUUFBUSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsaURBQWlEO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtHQUFrRyxFQUFFLEdBQUcsRUFBRTtRQUMxRyxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUVsRixNQUFNO1FBQ04sTUFBTSxP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SnVsacOhblxcRGVza3RvcFxcZnJvbnRcXGZyb250ZW5kLWFwcFxcc3JjXFxhcHBcXHNlcnZpY2VzXFxpbnNjcmlwY2lvbmRhdGEuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlLCBIdHRwVGVzdGluZ0NvbnRyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJztcclxuaW1wb3J0IHsgSW5zY3JpcHRpb25EYXRhU2VydmljZSB9IGZyb20gJy4vaW5zY3JpcGNpb25kYXRhLnNlcnZpY2UnO1xyXG5cclxuZGVzY3JpYmUoJ0luc2NyaXB0aW9uRGF0YVNlcnZpY2UnLCAoKSA9PiB7XHJcbiAgbGV0IHNlcnZpY2U6IEluc2NyaXB0aW9uRGF0YVNlcnZpY2U7XHJcbiAgbGV0IGh0dHBNb2NrOiBIdHRwVGVzdGluZ0NvbnRyb2xsZXI7XHJcbiAgXHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgaW1wb3J0czogW0h0dHBDbGllbnRUZXN0aW5nTW9kdWxlXSxcclxuICAgICAgcHJvdmlkZXJzOiBbSW5zY3JpcHRpb25EYXRhU2VydmljZV1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoSW5zY3JpcHRpb25EYXRhU2VydmljZSk7XHJcbiAgICBodHRwTW9jayA9IFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcik7XHJcbiAgfSk7XHJcblxyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBodHRwTW9jay52ZXJpZnkoKTsgLy8gRW5zdXJlIHRoYXQgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIHJlcXVlc3RzLlxyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGFkZCBhIG5ldyBpbnNjcmlwdGlvbiB3aGVuIHZhbGlkIHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgYW5kIGluc2NyaXB0aW9uX2RhdGUgYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3Qgc3R1ZGVudF9pZCA9ICcxMjMnO1xyXG4gICAgY29uc3QgY291cnNlX2lkID0gJzQ1Nic7XHJcbiAgICBjb25zdCBpbnNjcmlwdGlvbl9kYXRlID0gJzIwMjQtMDMtMTMnO1xyXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgaW5zY3JpcHRpb25fZGF0ZSB9O1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHsgbWVzc2FnZTogJ0luc2NyaXBjacOzbiBjcmVhZGEgZXhpdG9zYW1lbnRlJywgZGF0YToge30gfTtcclxuXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmFkZEluc2NyaXB0aW9uKHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgaW5zY3JpcHRpb25fZGF0ZSk7XHJcblxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLm1lc3NhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXNwb25zZS5tZXNzYWdlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSgoKSA9PiB0cnVlKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ1BPU1QnKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5ib2R5LmRhdGEpLm5vdC50b0JlTnVsbCgpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyAvLyBTaW11bGF0ZSBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci5cclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gc3R1ZGVudF9pZCBwYXJhbWV0ZXIgaXMgbWlzc2luZycsICgpID0+IHtcclxuICAgIC8vIEFycmFuZ2VcclxuICAgIGNvbnN0IGNvdXJzZV9pZCA9ICcyJztcclxuICAgIGNvbnN0IGluc2NyaXB0aW9uX2RhdGUgPSAnMjAyMS0wMS0wMSc7XHJcbiAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0ge307IC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGV4cGVjdGVkIHJlc3BvbnNlLlxyXG5cclxuICAgIC8vIEFjdFxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNlcnZpY2UuYWRkSW5zY3JpcHRpb24oJycsIGNvdXJzZV9pZCwgaW5zY3JpcHRpb25fZGF0ZSk7XHJcblxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZSh7XHJcbiAgICAgICAgZXJyb3I6IGVyciA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKCgpID0+IHRydWUpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyBcclxuICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBPYnNlcnZhYmxlIHdpdGggdGhlIGV4cGVjdGVkIGluc2NyaXB0aW9uIGRhdGEgd2hlbiBhIHZhbGlkIHN0dWRlbnRfaWQgaXMgcHJvdmlkZWQnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBzdHVkZW50X2lkID0gJ3ZhbGlkX3N0dWRlbnRfaWQnO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHsgLyogeW91ciBleHBlY3RlZCByZXNwb25zZSBoZXJlICovIH07XHJcbiAgXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmdldEluc2NyaXB0aW9uQnlTdHVkZW50SWQoc3R1ZGVudF9pZCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoKCkgPT4gdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QubWV0aG9kKS50b0JlKCdHRVQnKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgLy8gUHJvdmlkZSBhIG1vY2tlZCByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3QuXHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIEFQSSBjYWxsIGZhaWxzJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3Qgc3R1ZGVudF9pZCA9ICcxMjMnO1xyXG4gICAgY29uc3QgbW9ja0Vycm9yUmVzcG9uc2UgPSB7IHN0YXR1czogNTAwLCBzdGF0dXNUZXh0OiAnU2VydmVyIEVycm9yJyB9O1xyXG4gICAgY29uc3QgZGF0YSA9ICdJbnZhbGlkIHJlcXVlc3QnO1xyXG4gIFxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQgPSBzZXJ2aWNlLmdldEluc2NyaXB0aW9uQnlTdHVkZW50SWQoc3R1ZGVudF9pZCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdC5zdWJzY3JpYmUoe1xyXG4gICAgICBlcnJvcjogZXJyID0+IHtcclxuICAgICAgICBleHBlY3QoZXJyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICBcclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSgoKSA9PiB0cnVlKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ0dFVCcpO1xyXG4gICAgcmVxLmZsdXNoKGRhdGEsIG1vY2tFcnJvclJlc3BvbnNlKTsgLy8gU2ltdWxhdGUgYSBzZXJ2ZXIgZXJyb3IgcmVzcG9uc2UuXHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCBzZW5kIGEgREVMRVRFIHJlcXVlc3QgdG8gdGhlIGNvcnJlY3QgQVBJIGVuZHBvaW50IHdpdGggdGhlIGdpdmVuIGluc2NyaXB0aW9uIElEJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3QgaW5zY0lEID0gJzEyMyc7XHJcbiAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0geyBtZXNzYWdlOiAnSW5zY3JpcGNpb24gRWxpbWluYWRhJ31cclxuICBcclxuICAgIC8vIEFjdFxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNlcnZpY2UuZGVsZXRlSW5zY3JpcHRpb25CeUlkKGluc2NJRCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBleHBlY3QocmVzcG9uc2UubWVzc2FnZSkudG9FcXVhbChleHBlY3RlZFJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoKCkgPT4gdHJ1ZSk7XHJcbiAgICBleHBlY3QocmVxLnJlcXVlc3QubWV0aG9kKS50b0JlKCdERUxFVEUnKTtcclxuICAgIHJlcS5mbHVzaChleHBlY3RlZFJlc3BvbnNlKTsgLy8gUHJvdmlkZSBhIG1vY2tlZCByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3QuXHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGFuZGxlIGFuZCByZXR1cm4gYW4gb2JzZXJ2YWJsZSB3aXRoIGFuIGVycm9yIG1lc3NhZ2Ugd2hlbiBpbnNjSUQgcGFyYW1ldGVyIGlzIG51bGwgb3IgdW5kZWZpbmVkJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3QgaW5zY0lEID0gJyc7XHJcbiAgICBjb25zdCBtb2NrRXJyb3JSZXNwb25zZSA9IHsgc3RhdHVzOiA0MDAsIHN0YXR1c1RleHQ6ICdCYWQgUmVxdWVzdCcgfTtcclxuICAgIGNvbnN0IGRhdGEgPSAnaW5zY0lEIHBhcmFtZXRlciBpcyBudWxsIG9yIHVuZGVmaW5lZCc7XHJcbiAgXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2UuZGVsZXRlSW5zY3JpcHRpb25CeUlkKGluc2NJRCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdC5zdWJzY3JpYmUoe1xyXG4gICAgICBlcnJvcjogZXJyID0+IHtcclxuICAgICAgICBleHBlY3QoZXJyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgICAgIGV4cGVjdChlcnIuZXJyb3IpLnRvRXF1YWwoZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIFxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKCgpID0+IHRydWUpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnREVMRVRFJyk7XHJcbiAgICByZXEuZmx1c2goZGF0YSwgbW9ja0Vycm9yUmVzcG9uc2UpOyAvLyBTaW11bGF0ZSBhIHNlcnZlciBlcnJvciByZXNwb25zZS5cclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9