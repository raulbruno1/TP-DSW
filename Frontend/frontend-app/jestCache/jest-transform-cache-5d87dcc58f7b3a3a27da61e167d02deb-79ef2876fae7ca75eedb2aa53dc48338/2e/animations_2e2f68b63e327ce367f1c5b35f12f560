3c570bba837a473386f912bb5d19f13e
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var animations_exports = {};
__export(animations_exports, {
  ANIMATION_MODULE_TYPE: () => import_core2.ANIMATION_MODULE_TYPE,
  BrowserAnimationsModule: () => BrowserAnimationsModule,
  NoopAnimationsModule: () => NoopAnimationsModule,
  provideAnimations: () => provideAnimations,
  provideNoopAnimations: () => provideNoopAnimations,
  \u0275AnimationRenderer: () => AnimationRenderer,
  \u0275AnimationRendererFactory: () => AnimationRendererFactory,
  \u0275BrowserAnimationBuilder: () => BrowserAnimationBuilder,
  \u0275BrowserAnimationFactory: () => BrowserAnimationFactory,
  \u0275InjectableAnimationEngine: () => InjectableAnimationEngine
});
module.exports = __toCommonJS(animations_exports);
var i0 = __toESM(require("@angular/core"), 1);
var import_core = require("@angular/core");
var import_core2 = require("@angular/core");
var import_platform_browser = require("@angular/platform-browser");
var import_animations = require("@angular/animations");
var i1 = __toESM(require("@angular/animations/browser"), 1);
var import_browser = require("@angular/animations/browser");
var import_common = require("@angular/common");
/**
 * @license Angular v16.2.6
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */
const _BrowserAnimationBuilder = class _BrowserAnimationBuilder extends import_animations.AnimationBuilder {
  constructor(rootRenderer, doc) {
    super();
    this._nextAnimationId = 0;
    const typeData = { id: "0", encapsulation: import_core.ViewEncapsulation.None, styles: [], data: { animation: [] } };
    this._renderer = rootRenderer.createRenderer(doc.body, typeData);
  }
  build(animation) {
    const id = this._nextAnimationId.toString();
    this._nextAnimationId++;
    const entry = Array.isArray(animation) ? (0, import_animations.sequence)(animation) : animation;
    issueAnimationCommand(this._renderer, null, id, "register", [entry]);
    return new BrowserAnimationFactory(id, this._renderer);
  }
};
_BrowserAnimationBuilder.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _BrowserAnimationBuilder, deps: [{ token: i0.RendererFactory2 }, { token: import_common.DOCUMENT }], target: i0.\u0275\u0275FactoryTarget.Injectable });
_BrowserAnimationBuilder.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _BrowserAnimationBuilder });
let BrowserAnimationBuilder = _BrowserAnimationBuilder;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: BrowserAnimationBuilder, decorators: [{
  type: import_core.Injectable
}], ctorParameters: function() {
  return [{ type: i0.RendererFactory2 }, { type: void 0, decorators: [{
    type: import_core.Inject,
    args: [import_common.DOCUMENT]
  }] }];
} });
class BrowserAnimationFactory extends import_animations.AnimationFactory {
  constructor(_id, _renderer) {
    super();
    this._id = _id;
    this._renderer = _renderer;
  }
  create(element, options) {
    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
  }
}
class RendererAnimationPlayer {
  constructor(id, element, options, _renderer) {
    this.id = id;
    this.element = element;
    this._renderer = _renderer;
    this.parentPlayer = null;
    this._started = false;
    this.totalTime = 0;
    this._command("create", options);
  }
  _listen(eventName, callback) {
    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);
  }
  _command(command, ...args) {
    return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
  }
  onDone(fn) {
    this._listen("done", fn);
  }
  onStart(fn) {
    this._listen("start", fn);
  }
  onDestroy(fn) {
    this._listen("destroy", fn);
  }
  init() {
    this._command("init");
  }
  hasStarted() {
    return this._started;
  }
  play() {
    this._command("play");
    this._started = true;
  }
  pause() {
    this._command("pause");
  }
  restart() {
    this._command("restart");
  }
  finish() {
    this._command("finish");
  }
  destroy() {
    this._command("destroy");
  }
  reset() {
    this._command("reset");
    this._started = false;
  }
  setPosition(p) {
    this._command("setPosition", p);
  }
  getPosition() {
    var _a, _b;
    return (_b = (_a = this._renderer.engine.players[+this.id]) == null ? void 0 : _a.getPosition()) != null ? _b : 0;
  }
}
function issueAnimationCommand(renderer, element, id, command, args) {
  return renderer.setProperty(element, `@@${id}:${command}`, args);
}
const ANIMATION_PREFIX = "@";
const DISABLE_ANIMATIONS_FLAG = "@.disabled";
const _AnimationRendererFactory = class _AnimationRendererFactory {
  constructor(delegate, engine, _zone) {
    this.delegate = delegate;
    this.engine = engine;
    this._zone = _zone;
    this._currentId = 0;
    this._microtaskId = 1;
    this._animationCallbacksBuffer = [];
    this._rendererCache = /* @__PURE__ */ new Map();
    this._cdRecurDepth = 0;
    engine.onRemovalComplete = (element, delegate2) => {
      const parentNode = delegate2 == null ? void 0 : delegate2.parentNode(element);
      if (parentNode) {
        delegate2.removeChild(parentNode, element);
      }
    };
  }
  createRenderer(hostElement, type) {
    const EMPTY_NAMESPACE_ID = "";
    const delegate = this.delegate.createRenderer(hostElement, type);
    if (!hostElement || !type || !type.data || !type.data["animation"]) {
      let renderer = this._rendererCache.get(delegate);
      if (!renderer) {
        const onRendererDestroy = () => this._rendererCache.delete(delegate);
        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine, onRendererDestroy);
        this._rendererCache.set(delegate, renderer);
      }
      return renderer;
    }
    const componentId = type.id;
    const namespaceId = type.id + "-" + this._currentId;
    this._currentId++;
    this.engine.register(namespaceId, hostElement);
    const registerTrigger = (trigger) => {
      if (Array.isArray(trigger)) {
        trigger.forEach(registerTrigger);
      } else {
        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
      }
    };
    const animationTriggers = type.data["animation"];
    animationTriggers.forEach(registerTrigger);
    return new AnimationRenderer(this, namespaceId, delegate, this.engine);
  }
  begin() {
    this._cdRecurDepth++;
    if (this.delegate.begin) {
      this.delegate.begin();
    }
  }
  _scheduleCountTask() {
    queueMicrotask(() => {
      this._microtaskId++;
    });
  }
  /** @internal */
  scheduleListenerCallback(count, fn, data) {
    if (count >= 0 && count < this._microtaskId) {
      this._zone.run(() => fn(data));
      return;
    }
    if (this._animationCallbacksBuffer.length == 0) {
      queueMicrotask(() => {
        this._zone.run(() => {
          this._animationCallbacksBuffer.forEach((tuple) => {
            const [fn2, data2] = tuple;
            fn2(data2);
          });
          this._animationCallbacksBuffer = [];
        });
      });
    }
    this._animationCallbacksBuffer.push([fn, data]);
  }
  end() {
    this._cdRecurDepth--;
    if (this._cdRecurDepth == 0) {
      this._zone.runOutsideAngular(() => {
        this._scheduleCountTask();
        this.engine.flush(this._microtaskId);
      });
    }
    if (this.delegate.end) {
      this.delegate.end();
    }
  }
  whenRenderingDone() {
    return this.engine.whenRenderingDone();
  }
};
_AnimationRendererFactory.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _AnimationRendererFactory, deps: [{ token: i0.RendererFactory2 }, { token: i1.\u0275AnimationEngine }, { token: i0.NgZone }], target: i0.\u0275\u0275FactoryTarget.Injectable });
_AnimationRendererFactory.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _AnimationRendererFactory });
let AnimationRendererFactory = _AnimationRendererFactory;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: AnimationRendererFactory, decorators: [{
  type: import_core.Injectable
}], ctorParameters: function() {
  return [{ type: i0.RendererFactory2 }, { type: i1.\u0275AnimationEngine }, { type: i0.NgZone }];
} });
class BaseAnimationRenderer {
  constructor(namespaceId, delegate, engine, _onDestroy) {
    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this._onDestroy = _onDestroy;
  }
  get data() {
    return this.delegate.data;
  }
  destroyNode(node) {
    var _a, _b;
    (_b = (_a = this.delegate).destroyNode) == null ? void 0 : _b.call(_a, node);
  }
  destroy() {
    var _a;
    this.engine.destroy(this.namespaceId, this.delegate);
    this.engine.afterFlushAnimationsDone(() => {
      queueMicrotask(() => {
        this.delegate.destroy();
      });
    });
    (_a = this._onDestroy) == null ? void 0 : _a.call(this);
  }
  createElement(name, namespace) {
    return this.delegate.createElement(name, namespace);
  }
  createComment(value) {
    return this.delegate.createComment(value);
  }
  createText(value) {
    return this.delegate.createText(value);
  }
  appendChild(parent, newChild) {
    this.delegate.appendChild(parent, newChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, false);
  }
  insertBefore(parent, newChild, refChild, isMove = true) {
    this.delegate.insertBefore(parent, newChild, refChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
  }
  removeChild(parent, oldChild, isHostElement) {
    this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
  }
  selectRootElement(selectorOrNode, preserveContent) {
    return this.delegate.selectRootElement(selectorOrNode, preserveContent);
  }
  parentNode(node) {
    return this.delegate.parentNode(node);
  }
  nextSibling(node) {
    return this.delegate.nextSibling(node);
  }
  setAttribute(el, name, value, namespace) {
    this.delegate.setAttribute(el, name, value, namespace);
  }
  removeAttribute(el, name, namespace) {
    this.delegate.removeAttribute(el, name, namespace);
  }
  addClass(el, name) {
    this.delegate.addClass(el, name);
  }
  removeClass(el, name) {
    this.delegate.removeClass(el, name);
  }
  setStyle(el, style, value, flags) {
    this.delegate.setStyle(el, style, value, flags);
  }
  removeStyle(el, style, flags) {
    this.delegate.removeStyle(el, style, flags);
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
      this.disableAnimations(el, !!value);
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  setValue(node, value) {
    this.delegate.setValue(node, value);
  }
  listen(target, eventName, callback) {
    return this.delegate.listen(target, eventName, callback);
  }
  disableAnimations(element, value) {
    this.engine.disableAnimations(element, value);
  }
}
class AnimationRenderer extends BaseAnimationRenderer {
  constructor(factory, namespaceId, delegate, engine, onDestroy) {
    super(namespaceId, delegate, engine, onDestroy);
    this.factory = factory;
    this.namespaceId = namespaceId;
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX) {
      if (name.charAt(1) == "." && name == DISABLE_ANIMATIONS_FLAG) {
        value = value === void 0 ? true : !!value;
        this.disableAnimations(el, value);
      } else {
        this.engine.process(this.namespaceId, el, name.slice(1), value);
      }
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  listen(target, eventName, callback) {
    if (eventName.charAt(0) == ANIMATION_PREFIX) {
      const element = resolveElementFromTarget(target);
      let name = eventName.slice(1);
      let phase = "";
      if (name.charAt(0) != ANIMATION_PREFIX) {
        [name, phase] = parseTriggerCallbackName(name);
      }
      return this.engine.listen(this.namespaceId, element, name, phase, (event) => {
        const countId = event["_data"] || -1;
        this.factory.scheduleListenerCallback(countId, callback, event);
      });
    }
    return this.delegate.listen(target, eventName, callback);
  }
}
function resolveElementFromTarget(target) {
  switch (target) {
    case "body":
      return document.body;
    case "document":
      return document;
    case "window":
      return window;
    default:
      return target;
  }
}
function parseTriggerCallbackName(triggerName) {
  const dotIndex = triggerName.indexOf(".");
  const trigger = triggerName.substring(0, dotIndex);
  const phase = triggerName.slice(dotIndex + 1);
  return [trigger, phase];
}
const _InjectableAnimationEngine = class _InjectableAnimationEngine extends import_browser.\u0275AnimationEngine {
  // The `ApplicationRef` is injected here explicitly to force the dependency ordering.
  // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they
  // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.
  constructor(doc, driver, normalizer, appRef) {
    super(doc.body, driver, normalizer);
  }
  ngOnDestroy() {
    this.flush();
  }
};
_InjectableAnimationEngine.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _InjectableAnimationEngine, deps: [{ token: import_common.DOCUMENT }, { token: i1.AnimationDriver }, { token: i1.\u0275AnimationStyleNormalizer }, { token: i0.ApplicationRef }], target: i0.\u0275\u0275FactoryTarget.Injectable });
_InjectableAnimationEngine.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _InjectableAnimationEngine });
let InjectableAnimationEngine = _InjectableAnimationEngine;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: InjectableAnimationEngine, decorators: [{
  type: import_core.Injectable
}], ctorParameters: function() {
  return [{ type: void 0, decorators: [{
    type: import_core.Inject,
    args: [import_common.DOCUMENT]
  }] }, { type: i1.AnimationDriver }, { type: i1.\u0275AnimationStyleNormalizer }, { type: i0.ApplicationRef }];
} });
function instantiateDefaultStyleNormalizer() {
  return new import_browser.\u0275WebAnimationsStyleNormalizer();
}
function instantiateRendererFactory(renderer, engine, zone) {
  return new AnimationRendererFactory(renderer, engine, zone);
}
const SHARED_ANIMATION_PROVIDERS = [
  { provide: import_animations.AnimationBuilder, useClass: BrowserAnimationBuilder },
  { provide: import_browser.\u0275AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },
  { provide: import_browser.\u0275AnimationEngine, useClass: InjectableAnimationEngine },
  {
    provide: import_core.RendererFactory2,
    useFactory: instantiateRendererFactory,
    deps: [import_platform_browser.\u0275DomRendererFactory2, import_browser.\u0275AnimationEngine, import_core.NgZone]
  }
];
const BROWSER_ANIMATIONS_PROVIDERS = [
  { provide: import_browser.AnimationDriver, useFactory: () => new import_browser.\u0275WebAnimationsDriver() },
  { provide: import_core.ANIMATION_MODULE_TYPE, useValue: "BrowserAnimations" },
  ...SHARED_ANIMATION_PROVIDERS
];
const BROWSER_NOOP_ANIMATIONS_PROVIDERS = [
  { provide: import_browser.AnimationDriver, useClass: import_browser.\u0275NoopAnimationDriver },
  { provide: import_core.ANIMATION_MODULE_TYPE, useValue: "NoopAnimations" },
  ...SHARED_ANIMATION_PROVIDERS
];
const _BrowserAnimationsModule = class _BrowserAnimationsModule {
  /**
   * Configures the module based on the specified object.
   *
   * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
   * @see {@link BrowserAnimationsModuleConfig}
   *
   * @usageNotes
   * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
   * function as follows:
   * ```
   * @NgModule({
   *   imports: [BrowserAnimationsModule.withConfig(config)]
   * })
   * class MyNgModule {}
   * ```
   */
  static withConfig(config) {
    return {
      ngModule: _BrowserAnimationsModule,
      providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
    };
  }
};
_BrowserAnimationsModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _BrowserAnimationsModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
_BrowserAnimationsModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.6", ngImport: i0, type: _BrowserAnimationsModule, exports: [import_platform_browser.BrowserModule] });
_BrowserAnimationsModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _BrowserAnimationsModule, providers: BROWSER_ANIMATIONS_PROVIDERS, imports: [import_platform_browser.BrowserModule] });
let BrowserAnimationsModule = _BrowserAnimationsModule;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: BrowserAnimationsModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    exports: [import_platform_browser.BrowserModule],
    providers: BROWSER_ANIMATIONS_PROVIDERS
  }]
}] });
function provideAnimations() {
  return [...BROWSER_ANIMATIONS_PROVIDERS];
}
const _NoopAnimationsModule = class _NoopAnimationsModule {
};
_NoopAnimationsModule.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _NoopAnimationsModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule });
_NoopAnimationsModule.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.6", ngImport: i0, type: _NoopAnimationsModule, exports: [import_platform_browser.BrowserModule] });
_NoopAnimationsModule.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: _NoopAnimationsModule, providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS, imports: [import_platform_browser.BrowserModule] });
let NoopAnimationsModule = _NoopAnimationsModule;
i0.\u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.6", ngImport: i0, type: NoopAnimationsModule, decorators: [{
  type: import_core.NgModule,
  args: [{
    exports: [import_platform_browser.BrowserModule],
    providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
  }]
}] });
function provideNoopAnimations() {
  return [...BROWSER_NOOP_ANIMATIONS_PROVIDERS];
}
