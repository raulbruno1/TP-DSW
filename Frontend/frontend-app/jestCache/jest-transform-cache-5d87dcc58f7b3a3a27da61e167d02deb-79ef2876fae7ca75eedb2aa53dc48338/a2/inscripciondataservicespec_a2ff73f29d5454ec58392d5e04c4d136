2087ff19aee92e6e5c175cab44487406
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const inscripciondata_service_1 = require("./inscripciondata.service");
describe('InscriptionDataService', () => {
    let service;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            providers: [inscripciondata_service_1.InscriptionDataService]
        });
        service = testing_1.TestBed.inject(inscripciondata_service_1.InscriptionDataService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify(); // Ensure that there are no outstanding requests.
    });
    it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {
        // Arrange
        const student_id = '123';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'InscripciÃ³n creada exitosamente', data: {} };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(service['apiUrl']);
        expect(req.request.method).toBe('POST');
        expect(req.request.body.data).not.toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should return an Observable with the expected inscription data when a valid student_id is provided', () => {
        // Arrange
        const student_id = 'valid_student_id';
        const expectedResponse = { /* your expected response here */};
        // Act
        const result$ = service.getInscriptionByStudentId(student_id);
        // Assert
        result$.subscribe(response => {
            expect(response).toEqual(expectedResponse);
        });
        const req = httpMock.expectOne(`http://localhost:4000/api/inscripcion/alumno/${student_id}`);
        expect(req.request.method).toBe('GET');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should send a DELETE request to the correct API endpoint with the given inscription ID', () => {
        // Arrange
        const inscID = '123';
        const expectedResponse = { message: 'Inscripcion Eliminada' };
        // Act
        const result$ = service.deleteInscriptionById(inscID);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(`${service['apiUrl']}/${inscID}`);
        expect(req.request.method).toBe('DELETE');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcc2VydmljZXNcXGluc2NyaXBjaW9uZGF0YS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBQzlGLHVFQUFtRTtBQUVuRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLFFBQStCLENBQUM7SUFFcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsU0FBUyxFQUFFLENBQUMsZ0RBQXNCLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdEQUFzQixDQUFDLENBQUM7UUFDakQsUUFBUSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsaURBQWlEO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtHQUFrRyxFQUFFLEdBQUcsRUFBRTtRQUMxRyxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUVsRixNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFaEYsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztJQUN0RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvR0FBb0csRUFBRSxHQUFHLEVBQUU7UUFDNUcsVUFBVTtRQUNWLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDO1FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxpQ0FBaUMsQ0FBRSxDQUFDO1FBRS9ELE1BQU07UUFDTixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUQsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxnREFBZ0QsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsNkNBQTZDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdGQUF3RixFQUFFLEdBQUcsRUFBRTtRQUNoRyxVQUFVO1FBQ1YsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUMsQ0FBQTtRQUU1RCxNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRELFNBQVM7UUFDVCxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEp1bGnDoW5cXERlc2t0b3BcXGZyb250XFxmcm9udGVuZC1hcHBcXHNyY1xcYXBwXFxzZXJ2aWNlc1xcaW5zY3JpcGNpb25kYXRhLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XHJcbmltcG9ydCB7IEluc2NyaXB0aW9uRGF0YVNlcnZpY2UgfSBmcm9tICcuL2luc2NyaXBjaW9uZGF0YS5zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlJywgKCkgPT4ge1xyXG4gIGxldCBzZXJ2aWNlOiBJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlO1xyXG4gIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXHJcbiAgICAgIHByb3ZpZGVyczogW0luc2NyaXB0aW9uRGF0YVNlcnZpY2VdXHJcbiAgICB9KTtcclxuXHJcbiAgICBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoSW5zY3JpcHRpb25EYXRhU2VydmljZSk7XHJcbiAgICBodHRwTW9jayA9IFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcik7XHJcbiAgfSk7XHJcblxyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBodHRwTW9jay52ZXJpZnkoKTsgLy8gRW5zdXJlIHRoYXQgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIHJlcXVlc3RzLlxyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGFkZCBhIG5ldyBpbnNjcmlwdGlvbiB3aGVuIHZhbGlkIHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgYW5kIGluc2NyaXB0aW9uX2RhdGUgYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3Qgc3R1ZGVudF9pZCA9ICcxMjMnO1xyXG4gICAgY29uc3QgY291cnNlX2lkID0gJzQ1Nic7XHJcbiAgICBjb25zdCBpbnNjcmlwdGlvbl9kYXRlID0gJzIwMjQtMDMtMTMnO1xyXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgaW5zY3JpcHRpb25fZGF0ZSB9O1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHsgbWVzc2FnZTogJ0luc2NyaXBjacOzbiBjcmVhZGEgZXhpdG9zYW1lbnRlJywgZGF0YToge30gfTtcclxuXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmFkZEluc2NyaXB0aW9uKHN0dWRlbnRfaWQsIGNvdXJzZV9pZCwgaW5zY3JpcHRpb25fZGF0ZSk7XHJcblxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLm1lc3NhZ2UpLnRvRXF1YWwoZXhwZWN0ZWRSZXNwb25zZS5tZXNzYWdlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZShzZXJ2aWNlWydhcGlVcmwnXSk7IFxyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0LmJvZHkuZGF0YSkubm90LnRvQmVOdWxsKCk7XHJcbiAgICByZXEuZmx1c2goZXhwZWN0ZWRSZXNwb25zZSk7IC8vIFNpbXVsYXRlIGEgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLlxyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJldHVybiBhbiBPYnNlcnZhYmxlIHdpdGggdGhlIGV4cGVjdGVkIGluc2NyaXB0aW9uIGRhdGEgd2hlbiBhIHZhbGlkIHN0dWRlbnRfaWQgaXMgcHJvdmlkZWQnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBzdHVkZW50X2lkID0gJ3ZhbGlkX3N0dWRlbnRfaWQnO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IHsgLyogeW91ciBleHBlY3RlZCByZXNwb25zZSBoZXJlICovIH07XHJcbiAgXHJcbiAgICAvLyBBY3RcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzZXJ2aWNlLmdldEluc2NyaXB0aW9uQnlTdHVkZW50SWQoc3R1ZGVudF9pZCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoYGh0dHA6Ly9sb2NhbGhvc3Q6NDAwMC9hcGkvaW5zY3JpcGNpb24vYWx1bW5vLyR7c3R1ZGVudF9pZH1gKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ0dFVCcpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyAvLyBQcm92aWRlIGEgbW9ja2VkIHJlc3BvbnNlIGZvciB0aGUgcmVxdWVzdC5cclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBzZW5kIGEgREVMRVRFIHJlcXVlc3QgdG8gdGhlIGNvcnJlY3QgQVBJIGVuZHBvaW50IHdpdGggdGhlIGdpdmVuIGluc2NyaXB0aW9uIElEJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3QgaW5zY0lEID0gJzEyMyc7XHJcbiAgICBjb25zdCBleHBlY3RlZFJlc3BvbnNlID0geyBtZXNzYWdlOiAnSW5zY3JpcGNpb24gRWxpbWluYWRhJ31cclxuICBcclxuICAgIC8vIEFjdFxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNlcnZpY2UuZGVsZXRlSW5zY3JpcHRpb25CeUlkKGluc2NJRCk7XHJcbiAgXHJcbiAgICAvLyBBc3NlcnRcclxuICAgIHJlc3VsdCQuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBleHBlY3QocmVzcG9uc2UubWVzc2FnZSkudG9FcXVhbChleHBlY3RlZFJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoYCR7c2VydmljZVsnYXBpVXJsJ119LyR7aW5zY0lEfWApO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnREVMRVRFJyk7XHJcbiAgICByZXEuZmx1c2goZXhwZWN0ZWRSZXNwb25zZSk7IC8vIFByb3ZpZGUgYSBtb2NrZWQgcmVzcG9uc2UgZm9yIHRoZSByZXF1ZXN0LlxyXG4gIH0pO1xyXG59KTsiXSwidmVyc2lvbiI6M30=