{"file":"C:\\Users\\Julián\\Desktop\\front\\frontend-app\\src\\app\\services\\inscripciondata.service.spec.ts","mappings":";;AAEA,mDAAgD;AAChD,0DAA8F;AAC9F,uEAAmE;AAEnE,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,OAA+B,CAAC;IACpC,IAAI,QAA+B,CAAC;IAEpC,UAAU,CAAC,GAAG,EAAE;QACd,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE,CAAC,iCAAuB,CAAC;YAClC,SAAS,EAAE,CAAC,gDAAsB,CAAC;SACpC,CAAC,CAAC;QAEH,OAAO,GAAG,iBAAO,CAAC,MAAM,CAAC,gDAAsB,CAAC,CAAC;QACjD,QAAQ,GAAG,iBAAO,CAAC,MAAM,CAAC,+BAAqB,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,iDAAiD;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kGAAkG,EAAE,GAAG,EAAE;QAC1G,UAAU;QACV,MAAM,UAAU,GAAG,KAAK,CAAC;QACzB,MAAM,SAAS,GAAG,KAAK,CAAC;QACxB,MAAM,gBAAgB,GAAG,YAAY,CAAC;QACtC,MAAM,WAAW,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;QAChE,MAAM,gBAAgB,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QAE3C,MAAM;QACN,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC;QAEhF,SAAS;QACT,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,oCAAoC;QACvF,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,qFAAqF;QACrF,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7C,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,uCAAuC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\Julián\\Desktop\\front\\frontend-app\\src\\app\\services\\inscripciondata.service.spec.ts"],"sourcesContent":["\r\n\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { InscriptionDataService } from './inscripciondata.service';\r\n\r\ndescribe('InscriptionDataService', () => {\r\n  let service: InscriptionDataService;\r\n  let httpMock: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [InscriptionDataService]\r\n    });\r\n\r\n    service = TestBed.inject(InscriptionDataService);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify(); // Ensure that there are no outstanding requests.\r\n  });\r\n\r\n  it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {\r\n    // Arrange\r\n    const student_id = '123';\r\n    const course_id = '456';\r\n    const inscription_date = '2024-03-13';\r\n    const requestBody = { student_id, course_id, inscription_date };\r\n    const expectedResponse = { success: true };\r\n\r\n    // Act\r\n    const result$ = service.addInscription(student_id, course_id, inscription_date);\r\n\r\n    // Assert\r\n    result$.subscribe(response => {\r\n        expect(response).toEqual(expectedResponse);\r\n    });\r\n\r\n    const req = httpMock.expectOne(service['apiUrl']); // Replace with the URL of your API.\r\n    expect(req.request.method).toBe('POST');\r\n    /*expect(req.request.body.data.message).toEqual('Inscripción creada exitosamente');*/\r\n    expect(req.request.body.data).not.toBeNull();\r\n    req.flush(expectedResponse); // Simulate a response from the server.\r\n  });\r\n});"],"version":3}