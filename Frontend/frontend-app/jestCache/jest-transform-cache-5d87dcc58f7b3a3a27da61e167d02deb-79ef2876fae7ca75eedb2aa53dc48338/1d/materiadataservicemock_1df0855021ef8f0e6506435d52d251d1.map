{"version":3,"names":["cov_2hdtg75bbe","actualCoverage","s","http_1","require","core_1","rxjs_1","environment_1","HttpClientMock","get","f","of","CoursedataServiceMock","exports","constructor","http","apiUrl","environment","getCourse","courseData","params","HttpParams","set","name","totalhours","toString","email","level","desc","icon","getCourseById","id","url","pipe","catchError","error","throwError","Error","getAllCourses","addCourse","post","updateCourse","put","deleteCourseById","delete","tslib_1","__decorate","Injectable","providedIn"],"sources":["C:\\Users\\Juli√°n\\Desktop\\front\\frontend-app\\src\\app\\mocks\\materiadata.service.mock.ts"],"sourcesContent":["import { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, of, throwError } from \"rxjs\";\r\nimport { environment } from '../../environments/environment';\r\n\r\n\r\nclass HttpClientMock {\r\n  get() {\r\n    return of([]);\r\n  }\r\n}\r\n\r\nexport interface CourseDataMock {\r\n    name: string;\r\n    totalhours: number;\r\n    email: string;\r\n    level: string;\r\n    desc: string;\r\n    icon: string;\r\n  }\r\n  \r\n  \r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class CoursedataServiceMock {\r\n    private http: HttpClient = new HttpClientMock() as any;\r\n    private apiUrl = environment.apiUrl + '/materia';\r\n  \r\n  \r\n    constructor() { }\r\n  \r\n  \r\n    getCourse(courseData: CourseDataMock): Observable<any> {\r\n  \r\n      const params = new HttpParams()\r\n        .set('name', courseData.name)\r\n        .set('totalhours', courseData.totalhours.toString())\r\n        .set('email', courseData.email)\r\n        .set('level', courseData.level.toString())\r\n        .set('description', courseData.desc)\r\n        .set('icon', courseData.icon);\r\n  \r\n      return this.http.get(this.apiUrl, { params });\r\n    }\r\n  \r\n  \r\n    getCourseById(id: string): Observable<any> {\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.get(url).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n  \r\n    getAllCourses(): Observable<any> {\r\n      return this.http.get(this.apiUrl).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n  \r\n      )\r\n    }\r\n  \r\n    addCourse(courseData: any): Observable<any> {\r\n      return this.http.post(this.apiUrl, courseData).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n    updateCourse(id: string, courseData: any): Observable<any> {\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.put(url, courseData).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n    deleteCourseById(id:string):Observable<any>{\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.delete(url).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n  }"],"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"}