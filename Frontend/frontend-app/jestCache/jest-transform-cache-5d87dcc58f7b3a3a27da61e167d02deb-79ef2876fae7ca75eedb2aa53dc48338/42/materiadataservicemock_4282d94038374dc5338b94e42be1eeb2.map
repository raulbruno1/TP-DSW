{"version":3,"names":["index_1","cov_2hdtg75bbe","s","require","core_1","rxjs_1","environment_js_1","CoursedataServiceMock","exports","constructor","http","f","apiUrl","environment","getCourse","courseData","params","HttpParams","set","name","totalhours","toString","email","level","desc","icon","get","getCourseById","id","url","pipe","catchError","error","throwError","Error","getAllCourses","addCourse","post","updateCourse","put","deleteCourseById","delete","tslib_1","__decorate","Injectable","providedIn","HttpClient"],"sources":["C:\\Users\\Juli√°n\\Desktop\\front\\frontend-app\\src\\app\\mocks\\materiadata.service.mock.ts"],"sourcesContent":["import { HttpClient, HttpParams } from \"@angular/common/http/index\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, throwError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment.js\";\r\n\r\n\r\nexport interface CourseDataMock {\r\n    name: string;\r\n    totalhours: number;\r\n    email: string;\r\n    level: string;\r\n    desc: string;\r\n    icon: string;\r\n  }\r\n  \r\n  \r\n  @Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class CoursedataServiceMock {\r\n    private apiUrl = environment.apiUrl + '/materia';\r\n  \r\n  \r\n    constructor(private http: HttpClient) { }\r\n  \r\n  \r\n    getCourse(courseData: CourseDataMock): Observable<any> {\r\n  \r\n      const params = new HttpParams()\r\n        .set('name', courseData.name)\r\n        .set('totalhours', courseData.totalhours.toString())\r\n        .set('email', courseData.email)\r\n        .set('level', courseData.level.toString())\r\n        .set('description', courseData.desc)\r\n        .set('icon', courseData.icon);\r\n  \r\n      return this.http.get(this.apiUrl, { params });\r\n    }\r\n  \r\n  \r\n    getCourseById(id: string): Observable<any> {\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.get(url).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n  \r\n    getAllCourses(): Observable<any> {\r\n      return this.http.get(this.apiUrl).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n  \r\n      )\r\n    }\r\n  \r\n    addCourse(courseData: any): Observable<any> {\r\n      return this.http.post(this.apiUrl, courseData).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n    updateCourse(id: string, courseData: any): Observable<any> {\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.put(url, courseData).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n    deleteCourseById(id:string):Observable<any>{\r\n      const url = `${this.apiUrl}/${id}`;\r\n      return this.http.delete(url).pipe(\r\n        catchError((error: any) => {\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n    }\r\n  \r\n  }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,OAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,OAAAC,OAAA;AACA,MAAAE,MAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,OAAAC,OAAA;AACA,MAAAG,gBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,OAAAC,OAAA;AAgBS,IAAMI,qBAAqB;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,OAAAM,OAAA,CAAAD,qBAAA,GAA3B,MAAMA,qBAAqB;EAIhCE,YAAoBC,IAAgB;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IAAhB,KAAAQ,IAAI,GAAJA,IAAI;IAAY;IAAAT,cAAA,GAAAC,CAAA;IAH5B,KAAAU,MAAM,GAAGN,gBAAA,CAAAO,WAAW,CAACD,MAAM,GAAG,UAAU;EAGR;EAGxCE,SAASA,CAACC,UAA0B;IAAA;IAAAd,cAAA,GAAAU,CAAA;IAElC,MAAMK,MAAM;IAAA;IAAA,CAAAf,cAAA,GAAAC,CAAA,QAAG,IAAIF,OAAA,CAAAiB,UAAU,EAAE,CAC5BC,GAAG,CAAC,MAAM,EAAEH,UAAU,CAACI,IAAI,CAAC,CAC5BD,GAAG,CAAC,YAAY,EAAEH,UAAU,CAACK,UAAU,CAACC,QAAQ,EAAE,CAAC,CACnDH,GAAG,CAAC,OAAO,EAAEH,UAAU,CAACO,KAAK,CAAC,CAC9BJ,GAAG,CAAC,OAAO,EAAEH,UAAU,CAACQ,KAAK,CAACF,QAAQ,EAAE,CAAC,CACzCH,GAAG,CAAC,aAAa,EAAEH,UAAU,CAACS,IAAI,CAAC,CACnCN,GAAG,CAAC,MAAM,EAAEH,UAAU,CAACU,IAAI,CAAC;IAAC;IAAAxB,cAAA,GAAAC,CAAA;IAEhC,OAAO,IAAI,CAACQ,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACd,MAAM,EAAE;MAAEI;IAAM,CAAE,CAAC;EAC/C;EAGAW,aAAaA,CAACC,EAAU;IAAA;IAAA3B,cAAA,GAAAU,CAAA;IACtB,MAAMkB,GAAG;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG,GAAG,IAAI,CAACU,MAAM,IAAIgB,EAAE,EAAE;IAAC;IAAA3B,cAAA,GAAAC,CAAA;IACnC,OAAO,IAAI,CAACQ,IAAI,CAACgB,GAAG,CAACG,GAAG,CAAC,CAACC,IAAI,CAC5B,IAAAzB,MAAA,CAAA0B,UAAU,EAAEC,KAAU,IAAI;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACxB,OAAO,IAAAG,MAAA,CAAA4B,UAAU,EAAC,MAAM;QAAA;QAAAhC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,WAAIgC,KAAK,CAACF,KAAK,CAAC;MAAD,CAAC,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;EAGAG,aAAaA,CAAA;IAAA;IAAAlC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACX,OAAO,IAAI,CAACQ,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACd,MAAM,CAAC,CAACkB,IAAI,CACpC,IAAAzB,MAAA,CAAA0B,UAAU,EAAEC,KAAU,IAAI;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACxB,OAAO,IAAAG,MAAA,CAAA4B,UAAU,EAAC,MAAM;QAAA;QAAAhC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,WAAIgC,KAAK,CAACF,KAAK,CAAC;MAAD,CAAC,CAAC;IAC3C,CAAC,CAAC,CAEH;EACH;EAEAI,SAASA,CAACrB,UAAe;IAAA;IAAAd,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAC,CAAA;IACvB,OAAO,IAAI,CAACQ,IAAI,CAAC2B,IAAI,CAAC,IAAI,CAACzB,MAAM,EAAEG,UAAU,CAAC,CAACe,IAAI,CACjD,IAAAzB,MAAA,CAAA0B,UAAU,EAAEC,KAAU,IAAI;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACxB,OAAO,IAAAG,MAAA,CAAA4B,UAAU,EAAC,MAAM;QAAA;QAAAhC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,WAAIgC,KAAK,CAACF,KAAK,CAAC;MAAD,CAAC,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;EAEAM,YAAYA,CAACV,EAAU,EAAEb,UAAe;IAAA;IAAAd,cAAA,GAAAU,CAAA;IACtC,MAAMkB,GAAG;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG,GAAG,IAAI,CAACU,MAAM,IAAIgB,EAAE,EAAE;IAAC;IAAA3B,cAAA,GAAAC,CAAA;IACnC,OAAO,IAAI,CAACQ,IAAI,CAAC6B,GAAG,CAACV,GAAG,EAAEd,UAAU,CAAC,CAACe,IAAI,CACxC,IAAAzB,MAAA,CAAA0B,UAAU,EAAEC,KAAU,IAAI;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACxB,OAAO,IAAAG,MAAA,CAAA4B,UAAU,EAAC,MAAM;QAAA;QAAAhC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,WAAIgC,KAAK,CAACF,KAAK,CAAC;MAAD,CAAC,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;EACAQ,gBAAgBA,CAACZ,EAAS;IAAA;IAAA3B,cAAA,GAAAU,CAAA;IACxB,MAAMkB,GAAG;IAAA;IAAA,CAAA5B,cAAA,GAAAC,CAAA,QAAG,GAAG,IAAI,CAACU,MAAM,IAAIgB,EAAE,EAAE;IAAC;IAAA3B,cAAA,GAAAC,CAAA;IACnC,OAAO,IAAI,CAACQ,IAAI,CAAC+B,MAAM,CAACZ,GAAG,CAAC,CAACC,IAAI,CAC/B,IAAAzB,MAAA,CAAA0B,UAAU,EAAEC,KAAU,IAAI;MAAA;MAAA/B,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAC,CAAA;MACxB,OAAO,IAAAG,MAAA,CAAA4B,UAAU,EAAC,MAAM;QAAA;QAAAhC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAC,CAAA;QAAA,WAAIgC,KAAK,CAACF,KAAK,CAAC;MAAD,CAAC,CAAC;IAC3C,CAAC,CAAC,CACH;EACH;;;;;;;;;;;;;;;;gCA/DWzB,qBAAqB,GAAAmC,OAAA,CAAAC,UAAA,EAHjC,IAAAvC,MAAA,CAAAwC,UAAU,EAAC;EACVC,UAAU,EAAE;CACb,CAAC,E,yCAK0B7C,OAAA,CAAA8C,UAAU,G,EAJzBvC,qBAAqB,CAiEjC"}