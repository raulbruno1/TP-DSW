7333b391ac5c1e25a110ddf5308e070b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const cursos_component_1 = require("./cursos.component");
const materiadata_service_mock_1 = require("src/app/mocks/materiadata.service.mock");
const materiadata_service_1 = require("src/app/services/materiadata.service");
const dialog_service_mock_1 = require("src/app/mocks/dialog.service.mock");
const dialog_service_1 = require("src/app/services/dialog.service");
const http_1 = require("@angular/common/http");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const httpMock = { get: jest.fn() };
const dialogMock = { open: jest.fn() };
describe('CursosComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [cursos_component_1.CursosComponent],
            providers: [{ provide: materiadata_service_1.CoursedataService, useClass: materiadata_service_mock_1.CoursedataServiceMock },
                { provide: dialog_service_1.DialogService, useClass: dialog_service_mock_1.DialogServiceMock },
                { provide: http_1.HttpClient, useValue: httpMock },
                { provide: dialog_service_1.DialogService, useValue: dialogMock }]
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(cursos_component_1.CursosComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should handle error when getAllCourses fails', () => {
        const courseService = testing_1.TestBed.inject(materiadata_service_1.CoursedataService);
        const dialogService = testing_1.TestBed.inject(dialog_service_1.DialogService);
        const router = testing_1.TestBed.inject(router_1.Router);
        jest.spyOn(courseService, 'getAllCourses').mockImplementation(() => (0, rxjs_1.throwError)(() => new ErrorEvent('Network error')));
        const mockDialogRef = { afterClosed: () => (0, rxjs_1.of)({}) };
        jest.spyOn(dialogService, 'openFailureDialog').mockReturnValue(mockDialogRef);
        jest.spyOn(router, 'navigate').mockImplementation(() => Promise.resolve(true));
        component.ngOnInit();
        expect(courseService.getAllCourses).toHaveBeenCalled();
        expect(dialogService.openFailureDialog).toHaveBeenCalledWith('Error al cargar los datos, intente nuevamente');
        expect(router.navigate).toHaveBeenCalledWith(['/cursos']);
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should have "all" as the default selected category', () => {
        expect(component.selected_category).toEqual('all');
    });
    it('should filter courses by category', () => {
        const category = 'principiante';
        component.original_courses = [
            { id: '312313333', name: 'test', totalhours: 45, email: 'email@prueba', desc: 'hola', icon: '/assets/cursos/motherboard.svg', level: 'principiante' },
            { id: '312313334', name: 'test2', totalhours: 45, email: 'email2@prueba', desc: 'hola', icon: '/assets/cursos/motherboard.svg', level: 'avanzado' },
            { id: '312313335', name: 'test3', totalhours: 45, email: 'email3@prueba', desc: 'hola', icon: '/assets/cursos/motherboard.svg', level: 'principiante' }
        ];
        component.filterByCategory(category);
        expect(component.courses).toEqual(component.original_courses.filter((course) => course.level === category));
    });
    it('should show all courses when ShowAll is called', () => {
        component.ShowAll();
        expect(component.courses).toEqual(component.original_courses);
    });
    it('should reset selected category and courses when restart is called', () => {
        component.restart();
        expect(component.selected_category).toEqual('all');
        expect(component.courses).toEqual(component.original_courses);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,