2750419a1c5d150d897949c259112863
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const cursos_component_1 = require("./cursos.component");
const materiadata_service_mock_1 = require("src/app/mocks/materiadata.service.mock");
const materiadata_service_1 = require("src/app/services/materiadata.service");
const dialog_service_mock_1 = require("src/app/mocks/dialog.service.mock");
const dialog_service_1 = require("src/app/services/dialog.service");
const http_1 = require("@angular/common/http");
const httpMock = { get: jest.fn() };
const dialogMock = { open: jest.fn() };
describe('CursosComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [cursos_component_1.CursosComponent],
            providers: [{ provide: materiadata_service_1.CoursedataService, useClass: materiadata_service_mock_1.CoursedataServiceMock },
                { provide: dialog_service_1.DialogService, useClass: dialog_service_mock_1.DialogServiceMock },
                { provide: http_1.HttpClient, useValue: httpMock },
                { provide: dialog_service_1.DialogService, useValue: dialogMock }]
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(cursos_component_1.CursosComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should have "all" as the default selected category', () => {
        expect(component.selected_category).toEqual('all');
    });
    it('should filter courses by category', () => {
        const category = 'math';
        component.filterByCategory(category);
        expect(component.courses).toEqual(component.original_courses.filter((course) => course.category === category));
    });
    it('should show all courses when ShowAll is called', () => {
        component.ShowAll();
        expect(component.courses).toEqual(component.original_courses);
    });
    it('should reset selected category and courses when restart is called', () => {
        component.restart();
        expect(component.selected_category).toEqual('all');
        expect(component.courses).toEqual(component.original_courses);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcY29tcG9uZW50c1xcY3Vyc29zXFxjdXJzb3MuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0U7QUFDbEUseURBQXFEO0FBQ3JELHFGQUErRTtBQUMvRSw4RUFBeUU7QUFDekUsMkVBQXNFO0FBQ3RFLG9FQUFnRTtBQUNoRSwrQ0FBa0Q7QUFFbEQsTUFBTSxRQUFRLEdBQUcsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFDbEMsTUFBTSxVQUFVLEdBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFFcEMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLFNBQTBCLENBQUM7SUFDL0IsSUFBSSxPQUEwQyxDQUFDO0lBRS9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGtDQUFlLENBQUM7WUFDL0IsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsdUNBQWlCLEVBQUUsUUFBUSxFQUFFLGdEQUFxQixFQUFDO2dCQUM3RCxFQUFDLE9BQU8sRUFBRSw4QkFBYSxFQUFFLFFBQVEsRUFBRSx1Q0FBaUIsRUFBQztnQkFDdkQsRUFBQyxPQUFPLEVBQUUsaUJBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDO2dCQUN6QyxFQUFDLE9BQU8sRUFBRSw4QkFBYSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUMsQ0FBQztTQUMxRCxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2QixPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1FBQ25ELFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDdEMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEdBQUcsRUFBRTtRQUM1RCxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUMzQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDeEIsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUE2QixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDeEksQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsR0FBRyxFQUFFO1FBQ3hELFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtRUFBbUUsRUFBRSxHQUFHLEVBQUU7UUFDM0UsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEp1bGnDoW5cXERlc2t0b3BcXGZyb250XFxmcm9udGVuZC1hcHBcXHNyY1xcYXBwXFxjb21wb25lbnRzXFxjdXJzb3NcXGN1cnNvcy5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcclxuaW1wb3J0IHsgQ3Vyc29zQ29tcG9uZW50IH0gZnJvbSAnLi9jdXJzb3MuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ291cnNlZGF0YVNlcnZpY2VNb2NrIH0gZnJvbSAnc3JjL2FwcC9tb2Nrcy9tYXRlcmlhZGF0YS5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBDb3Vyc2VkYXRhU2VydmljZSB9IGZyb20gJ3NyYy9hcHAvc2VydmljZXMvbWF0ZXJpYWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2VNb2NrIH0gZnJvbSAnc3JjL2FwcC9tb2Nrcy9kaWFsb2cuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgRGlhbG9nU2VydmljZSB9IGZyb20gJ3NyYy9hcHAvc2VydmljZXMvZGlhbG9nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuY29uc3QgaHR0cE1vY2sgPSB7Z2V0OiBqZXN0LmZuKCl9O1xyXG5jb25zdCBkaWFsb2dNb2NrPSB7b3BlbjogamVzdC5mbigpfTtcclxuXHJcbmRlc2NyaWJlKCdDdXJzb3NDb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgbGV0IGNvbXBvbmVudDogQ3Vyc29zQ29tcG9uZW50O1xyXG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPEN1cnNvc0NvbXBvbmVudD47XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcclxuICAgICAgZGVjbGFyYXRpb25zOiBbQ3Vyc29zQ29tcG9uZW50XSxcclxuICAgICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENvdXJzZWRhdGFTZXJ2aWNlLCB1c2VDbGFzczogQ291cnNlZGF0YVNlcnZpY2VNb2NrfSxcclxuICAgICAgICAgICAgICAgICAge3Byb3ZpZGU6IERpYWxvZ1NlcnZpY2UsIHVzZUNsYXNzOiBEaWFsb2dTZXJ2aWNlTW9ja30sXHJcbiAgICAgICAgICAgICAgICB7cHJvdmlkZTogSHR0cENsaWVudCwgdXNlVmFsdWU6IGh0dHBNb2NrfSxcclxuICAgICAgICAgICAgICAgIHtwcm92aWRlOiBEaWFsb2dTZXJ2aWNlLCB1c2VWYWx1ZTogZGlhbG9nTW9ja31dXHJcbiAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xyXG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEN1cnNvc0NvbXBvbmVudCk7XHJcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhdmUgXCJhbGxcIiBhcyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBjYXRlZ29yeScsICgpID0+IHtcclxuICAgIGV4cGVjdChjb21wb25lbnQuc2VsZWN0ZWRfY2F0ZWdvcnkpLnRvRXF1YWwoJ2FsbCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGZpbHRlciBjb3Vyc2VzIGJ5IGNhdGVnb3J5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgY2F0ZWdvcnkgPSAnbWF0aCc7XHJcbiAgICBjb21wb25lbnQuZmlsdGVyQnlDYXRlZ29yeShjYXRlZ29yeSk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMuZmlsdGVyKChjb3Vyc2U6IHsgY2F0ZWdvcnk6IHN0cmluZzsgfSkgPT4gY291cnNlLmNhdGVnb3J5ID09PSBjYXRlZ29yeSkpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHNob3cgYWxsIGNvdXJzZXMgd2hlbiBTaG93QWxsIGlzIGNhbGxlZCcsICgpID0+IHtcclxuICAgIGNvbXBvbmVudC5TaG93QWxsKCk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJlc2V0IHNlbGVjdGVkIGNhdGVnb3J5IGFuZCBjb3Vyc2VzIHdoZW4gcmVzdGFydCBpcyBjYWxsZWQnLCAoKSA9PiB7XHJcbiAgICBjb21wb25lbnQucmVzdGFydCgpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5zZWxlY3RlZF9jYXRlZ29yeSkudG9FcXVhbCgnYWxsJyk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMpO1xyXG4gIH0pO1xyXG59KTsiXSwidmVyc2lvbiI6M30=