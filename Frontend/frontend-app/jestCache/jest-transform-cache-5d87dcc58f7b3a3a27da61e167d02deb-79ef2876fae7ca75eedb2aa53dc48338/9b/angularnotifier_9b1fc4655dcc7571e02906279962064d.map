{
  "version": 3,
  "sources": ["C:\\Users\\Juli\u00E1n\\Desktop\\front\\frontend-app\\node_modules\\angular-notifier\\fesm2022\\angular-notifier.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nclass NotifierNotification {\n    /**\n     * Constructor\n     *\n     * @param options Notifier options\n     */\n    constructor(options) {\n        /**\n         * The template to customize\n         * the appearance of the notification\n         */\n        this.template = null;\n        Object.assign(this, options);\n        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n        // is not possible due to the action queue concept.\n        if (options.id === undefined) {\n            this.id = `ID_${new Date().getTime()}`;\n        }\n    }\n}\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\nclass NotifierQueueService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.actionStream = new Subject();\n        this.actionQueue = [];\n        this.isActionInProgress = false;\n    }\n    /**\n     * Push a new action to the queue, and try to run it\n     *\n     * @param action Action object\n     */\n    push(action) {\n        this.actionQueue.push(action);\n        this.tryToRunNextAction();\n    }\n    /**\n     * Continue with the next action (called when the current action is finished)\n     */\n    continue() {\n        this.isActionInProgress = false;\n        this.tryToRunNextAction();\n    }\n    /**\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n     */\n    tryToRunNextAction() {\n        if (this.isActionInProgress || this.actionQueue.length === 0) {\n            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n        }\n        this.isActionInProgress = true;\n        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierQueueService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierQueueService }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierQueueService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Injection Token for notifier options\n */\nconst NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\nconst NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nclass NotifierConfig {\n    /**\n     * Constructor\n     *\n     * @param [customOptions={}] Custom notifier options, optional\n     */\n    constructor(customOptions = {}) {\n        // Set default values\n        this.animations = {\n            enabled: true,\n            hide: {\n                easing: 'ease',\n                offset: 50,\n                preset: 'fade',\n                speed: 300,\n            },\n            overlap: 150,\n            shift: {\n                easing: 'ease',\n                speed: 300,\n            },\n            show: {\n                easing: 'ease',\n                preset: 'slide',\n                speed: 300,\n            },\n        };\n        this.behaviour = {\n            autoHide: 7000,\n            onClick: false,\n            onMouseover: 'pauseAutoHide',\n            showDismissButton: true,\n            stacking: 4,\n        };\n        this.position = {\n            horizontal: {\n                distance: 12,\n                position: 'left',\n            },\n            vertical: {\n                distance: 12,\n                gap: 10,\n                position: 'bottom',\n            },\n        };\n        this.theme = 'material';\n        // The following merges the custom options into the notifier config, respecting the already set default values\n        // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n        // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n        if (customOptions.theme !== undefined) {\n            this.theme = customOptions.theme;\n        }\n        if (customOptions.animations !== undefined) {\n            if (customOptions.animations.enabled !== undefined) {\n                this.animations.enabled = customOptions.animations.enabled;\n            }\n            if (customOptions.animations.overlap !== undefined) {\n                this.animations.overlap = customOptions.animations.overlap;\n            }\n            if (customOptions.animations.hide !== undefined) {\n                Object.assign(this.animations.hide, customOptions.animations.hide);\n            }\n            if (customOptions.animations.shift !== undefined) {\n                Object.assign(this.animations.shift, customOptions.animations.shift);\n            }\n            if (customOptions.animations.show !== undefined) {\n                Object.assign(this.animations.show, customOptions.animations.show);\n            }\n        }\n        if (customOptions.behaviour !== undefined) {\n            Object.assign(this.behaviour, customOptions.behaviour);\n        }\n        if (customOptions.position !== undefined) {\n            if (customOptions.position.horizontal !== undefined) {\n                Object.assign(this.position.horizontal, customOptions.position.horizontal);\n            }\n            if (customOptions.position.vertical !== undefined) {\n                Object.assign(this.position.vertical, customOptions.position.vertical);\n            }\n        }\n    }\n}\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nclass NotifierService {\n    /**\n     * Constructor\n     *\n     * @param notifierQueueService Notifier queue service\n     * @param config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService, config) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get the observable for handling actions\n     *\n     * @returns Observable of NotifierAction\n     */\n    get actionStream() {\n        return this.queueService.actionStream.asObservable();\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param notificationOptions Notification options\n     */\n    show(notificationOptions) {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW',\n        });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param notificationId ID of the notification to hide\n     */\n    hide(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * API: Hide the newest notification\n     */\n    hideNewest() {\n        this.queueService.push({\n            type: 'HIDE_NEWEST',\n        });\n    }\n    /**\n     * API: Hide the oldest notification\n     */\n    hideOldest() {\n        this.queueService.push({\n            type: 'HIDE_OLDEST',\n        });\n    }\n    /**\n     * API: Hide all notifications at once\n     */\n    hideAll() {\n        this.queueService.push({\n            type: 'HIDE_ALL',\n        });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param type             Type of the notification\n     * @param message          Message of the notification\n     * @param [notificationId] Unique ID for the notification (optional)\n     */\n    notify(type, message, notificationId) {\n        const notificationOptions = {\n            message,\n            type,\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierService, deps: [{ token: NotifierQueueService }, { token: NotifierConfigToken }], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierService }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{\n                    type: Inject,\n                    args: [NotifierConfigToken]\n                }] }]; } });\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nclass NotifierTimerService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param   duration Timer duration, in ms\n     * @returns          Promise, resolved once the timer finishes\n     */\n    start(duration) {\n        return new Promise((resolve) => {\n            // For the first run ...\n            this.remaining = duration;\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n        });\n    }\n    /**\n     * Pause the timer\n     */\n    pause() {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     */\n    continue() {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout(() => {\n            this.finish();\n        }, this.remaining);\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     */\n    finish() {\n        this.finishPromiseResolver();\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierTimerService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierTimerService }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierTimerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Fade animation preset\n */\nconst fade = {\n    hide: () => {\n        return {\n            from: {\n                opacity: '1',\n            },\n            to: {\n                opacity: '0',\n            },\n        };\n    },\n    show: () => {\n        return {\n            from: {\n                opacity: '0',\n            },\n            to: {\n                opacity: '1',\n            },\n        };\n    },\n};\n\n/**\n * Slide animation preset\n */\nconst slide = {\n    hide: (notification) => {\n        // Prepare variables\n        const config = notification.component.getConfig();\n        const shift = notification.component.getShift();\n        let from;\n        let to;\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,\n            };\n        }\n        else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,\n            };\n        }\n        else {\n            let horizontalPosition;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            }\n            else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${shift}px, 0 )`,\n            };\n            to = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n            };\n        }\n        // Done\n        return {\n            from,\n            to,\n        };\n    },\n    show: (notification) => {\n        // Prepare variables\n        const config = notification.component.getConfig();\n        let from;\n        let to;\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )',\n            };\n        }\n        else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )',\n            };\n        }\n        else {\n            let horizontalPosition;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            }\n            else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n            };\n            to = {\n                transform: 'translate3d( -50%, 0, 0 )',\n            };\n        }\n        // Done\n        return {\n            from,\n            to,\n        };\n    },\n};\n\n/**\n * Notifier animation service\n */\nclass NotifierAnimationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.animationPresets = {\n            fade,\n            slide,\n        };\n    }\n    /**\n     * Get animation data\n     *\n     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n     * direction (either in or out) as well as the notifications (and its attributes) itself.\n     *\n     * @param   direction    Animation direction, either in or out\n     * @param   notification Notification the animation data should be generated for\n     * @returns Animation information\n     */\n    getAnimationData(direction, notification) {\n        // Get all necessary animation data\n        let keyframes;\n        let duration;\n        let easing;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        }\n        else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n        // Build and return animation data\n        return {\n            keyframes: [keyframes.from, keyframes.to],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards', // Keep the newly painted state after the animation finished\n            },\n        };\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierAnimationService, deps: [], target: i0.\u0275\u0275FactoryTarget.Injectable }); }\n    static { this.\u0275prov = i0.\u0275\u0275ngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierAnimationService }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierAnimationService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nclass NotifierNotificationComponent {\n    /**\n     * Constructor\n     *\n     * @param elementRef               Reference to the component's element\n     * @param renderer                 Angular renderer\n     * @param notifierService          Notifier service\n     * @param notifierTimerService     Notifier timer service\n     * @param notifierAnimationService Notifier animation service\n     */\n    constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n        this.config = notifierService.getConfig();\n        this.ready = new EventEmitter();\n        this.dismiss = new EventEmitter();\n        this.timerService = notifierTimerService;\n        this.animationService = notifierAnimationService;\n        this.renderer = renderer;\n        this.element = elementRef.nativeElement;\n        this.elementShift = 0;\n    }\n    /**\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\n     */\n    ngAfterViewInit() {\n        this.setup();\n        this.elementHeight = this.element.offsetHeight;\n        this.elementWidth = this.element.offsetWidth;\n        this.ready.emit(this);\n    }\n    /**\n     * Get the notifier config\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get notification element height (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getHeight() {\n        return this.elementHeight;\n    }\n    /**\n     * Get notification element width (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getWidth() {\n        return this.elementWidth;\n    }\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @returns Notification element shift offset (in px)\n     */\n    getShift() {\n        return this.elementShift;\n    }\n    /**\n     * Show (animate in) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    show() {\n        return new Promise((resolve) => {\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n                // Get animation data\n                const animationData = this.animationService.getAnimationData('show', this.notification);\n                // Set initial styles (styles before animation), prevents quick flicker when animation starts\n                const animatedProperties = Object.keys(animationData.keyframes[0]);\n                for (let i = animatedProperties.length - 1; i >= 0; i--) {\n                    this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n                }\n                // Animate notification in\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    this.startAutoHideTimer();\n                    resolve(); // Done\n                };\n            }\n            else {\n                // Show notification\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                this.startAutoHideTimer();\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Hide (animate out) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    hide() {\n        return new Promise((resolve) => {\n            this.stopAutoHideTimer();\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                const animationData = this.animationService.getAnimationData('hide', this.notification);\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Shift (move) this notification\n     *\n     * @param   distance         Distance to shift (in px)\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\n     * @returns Promise, resolved when done\n     */\n    shift(distance, shiftToMakePlace) {\n        return new Promise((resolve) => {\n            // Calculate new position (position after the shift)\n            let newElementShift;\n            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace) ||\n                (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n            }\n            else {\n                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n            }\n            const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n                const animationData = {\n                    // TODO: Extract into animation service\n                    keyframes: [\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,\n                        },\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,\n                        },\n                    ],\n                    options: {\n                        duration: this.config.animations.shift.speed,\n                        easing: this.config.animations.shift.easing,\n                        fill: 'forwards',\n                    },\n                };\n                this.elementShift = newElementShift;\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n                this.elementShift = newElementShift;\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Handle click on dismiss button\n     */\n    onClickDismiss() {\n        this.dismiss.emit(this.notification.id);\n    }\n    /**\n     * Handle mouseover over notification area\n     */\n    onNotificationMouseover() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.pauseAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.stopAutoHideTimer();\n        }\n    }\n    /**\n     * Handle mouseout from notification area\n     */\n    onNotificationMouseout() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.continueAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.startAutoHideTimer();\n        }\n    }\n    /**\n     * Handle click on notification area\n     */\n    onNotificationClick() {\n        if (this.config.behaviour.onClick === 'hide') {\n            this.onClickDismiss();\n        }\n    }\n    /**\n     * Start the auto hide timer (if enabled)\n     */\n    startAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.start(this.config.behaviour.autoHide).then(() => {\n                this.onClickDismiss();\n            });\n        }\n    }\n    /**\n     * Pause the auto hide timer (if enabled)\n     */\n    pauseAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.pause();\n        }\n    }\n    /**\n     * Continue the auto hide timer (if enabled)\n     */\n    continueAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.continue();\n        }\n    }\n    /**\n     * Stop the auto hide timer (if enabled)\n     */\n    stopAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.stop();\n        }\n    }\n    /**\n     * Initial notification setup\n     */\n    setup() {\n        // Set start position (initially the exact same for every new notification)\n        if (this.config.position.horizontal.position === 'left') {\n            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n        }\n        else if (this.config.position.horizontal.position === 'right') {\n            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'left', '50%');\n            // Let's get the GPU handle some work as well (#perfmatters)\n            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n        }\n        if (this.config.position.vertical.position === 'top') {\n            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n        }\n        // Add classes (responsible for visual design)\n        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierNotificationComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NotifierService }, { token: NotifierTimerService }, { token: NotifierAnimationService }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.4\", type: NotifierNotificationComponent, selector: \"notifier-notification\", inputs: { notification: \"notification\" }, outputs: { ready: \"ready\", dismiss: \"dismiss\" }, host: { listeners: { \"click\": \"onNotificationClick()\", \"mouseout\": \"onNotificationMouseout()\", \"mouseover\": \"onNotificationMouseover()\" }, classAttribute: \"notifier__notification\" }, providers: [\n            // We provide the timer to the component's local injector, so that every notification components gets its own\n            // instance of the timer service, thus running their timers independently from each other\n            NotifierTimerService,\n        ], ngImport: i0, template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\", dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierNotificationComponent, decorators: [{\n            type: Component,\n            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        '(click)': 'onNotificationClick()',\n                        '(mouseout)': 'onNotificationMouseout()',\n                        '(mouseover)': 'onNotificationMouseover()',\n                        class: 'notifier__notification',\n                    }, providers: [\n                        // We provide the timer to the component's local injector, so that every notification components gets its own\n                        // instance of the timer service, thus running their timers independently from each other\n                        NotifierTimerService,\n                    ], selector: 'notifier-notification', template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NotifierService }, { type: NotifierTimerService }, { type: NotifierAnimationService }]; }, propDecorators: { notification: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], dismiss: [{\n                type: Output\n            }] } });\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\nclass NotifierContainerComponent {\n    /**\n     * Constructor\n     *\n     * @param changeDetector       Change detector, used for manually triggering change detection runs\n     * @param notifierQueueService Notifier queue service\n     * @param notifierService      Notifier service\n     */\n    constructor(changeDetector, notifierQueueService, notifierService) {\n        this.changeDetector = changeDetector;\n        this.queueService = notifierQueueService;\n        this.config = notifierService.getConfig();\n        this.notifications = [];\n        // Connects this component up to the action queue, then handle incoming actions\n        this.queueServiceSubscription = this.queueService.actionStream.subscribe((action) => {\n            this.handleAction(action).then(() => {\n                this.queueService.continue();\n            });\n        });\n    }\n    /**\n     * Component destroyment lifecycle hook, cleans up the observable subsciption\n     */\n    ngOnDestroy() {\n        if (this.queueServiceSubscription) {\n            this.queueServiceSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Notification identifier, used as the ngFor trackby function\n     *\n     * @param   index        Index\n     * @param   notification Notifier notification\n     * @returns Notification ID as the unique identnfier\n     */\n    identifyNotification(index, notification) {\n        return notification.id;\n    }\n    /**\n     * Event handler, handles clicks on notification dismiss buttons\n     *\n     * @param notificationId ID of the notification to dismiss\n     */\n    onNotificationDismiss(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * Event handler, handles notification ready events\n     *\n     * @param notificationComponent Notification component reference\n     */\n    onNotificationReady(notificationComponent) {\n        const currentNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n        currentNotification.component = notificationComponent; // Save the new omponent reference\n        this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n    /**\n     * Handle incoming actions by mapping action types to methods, and then running them\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleAction(action) {\n        switch (action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n        ) {\n            case 'SHOW':\n                return this.handleShowAction(action);\n            case 'HIDE':\n                return this.handleHideAction(action);\n            case 'HIDE_OLDEST':\n                return this.handleHideOldestAction(action);\n            case 'HIDE_NEWEST':\n                return this.handleHideNewestAction(action);\n            case 'HIDE_ALL':\n                return this.handleHideAllAction();\n            default:\n                return new Promise((resolve) => {\n                    resolve(); // Ignore unknown action types\n                });\n        }\n    }\n    /**\n     * Show a new notification\n     *\n     * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleShowAction(action) {\n        return new Promise((resolve) => {\n            this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n            this.addNotificationToList(new NotifierNotification(action.payload));\n        });\n    }\n    /**\n     * Continue to show a new notification (after the notification components is initialized / created / rendered).\n     *\n     * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n     * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n     * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n     * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n     *\n     * @param notification New notification to show\n     */\n    continueHandleShowAction(notification) {\n        // First (which means only one) notification in the list?\n        const numberOfNotifications = this.notifications.length;\n        if (numberOfNotifications === 1) {\n            notification.component.show().then(this.tempPromiseResolver); // Done\n        }\n        else {\n            const implicitStackingLimit = 2;\n            // Stacking enabled? (stacking value below 2 means stacking is disabled)\n            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n                this.notifications[0].component.hide().then(() => {\n                    this.removeNotificationFromList(this.notifications[0]);\n                    notification.component.show().then(this.tempPromiseResolver); // Done\n                });\n            }\n            else {\n                const stepPromises = [];\n                // Are there now too many notifications?\n                if (numberOfNotifications > this.config.behaviour.stacking) {\n                    const oldNotifications = this.notifications.slice(1, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.notifications[0].component.hide());\n                            setTimeout(() => {\n                                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            }, this.config.animations.hide.speed - this.config.animations.overlap);\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.notifications[0].component.hide().then(() => {\n                                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                        notification.component.show().then(resolve);\n                                    });\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.notifications[0].component.hide());\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                else {\n                    const oldNotifications = this.notifications.slice(0, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                    notification.component.show().then(resolve);\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                Promise.all(stepPromises).then(() => {\n                    if (numberOfNotifications > this.config.behaviour.stacking) {\n                        this.removeNotificationFromList(this.notifications[0]);\n                    }\n                    this.tempPromiseResolver();\n                }); // Done\n            }\n        }\n    }\n    /**\n     * Hide an existing notification\n     *\n     * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n     * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n     * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n     *\n     * @param   action Action object, payload contains the notification ID\n     * @returns Promise, resolved when done\n     */\n    handleHideAction(action) {\n        return new Promise((resolve) => {\n            const stepPromises = [];\n            // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n            const notification = this.findNotificationById(action.payload);\n            if (notification === undefined) {\n                resolve();\n                return;\n            }\n            // Get older notifications\n            const notificationIndex = this.findNotificationIndexById(action.payload);\n            if (notificationIndex === undefined) {\n                resolve();\n                return;\n            }\n            const oldNotifications = this.notifications.slice(0, notificationIndex);\n            // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n            if (oldNotifications.length > 0) {\n                // Are animations enabled?\n                if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                    // Is animation overlap enabled?\n                    if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                        stepPromises.push(notification.component.hide());\n                        setTimeout(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }, this.config.animations.hide.speed - this.config.animations.overlap);\n                    }\n                    else {\n                        notification.component.hide().then(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        });\n                    }\n                }\n                else {\n                    stepPromises.push(notification.component.hide());\n                    stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                }\n            }\n            else {\n                stepPromises.push(notification.component.hide());\n            }\n            // Wait until both hiding and shifting is done, then remove the notification from the list\n            Promise.all(stepPromises).then(() => {\n                this.removeNotificationFromList(notification);\n                resolve(); // Done\n            });\n        });\n    }\n    /**\n     * Hide the oldest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideOldestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[0].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide the newest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideNewestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[this.notifications.length - 1].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide all notifications at once\n     *\n     * @returns Promise, resolved when done\n     */\n    handleHideAllAction() {\n        return new Promise((resolve) => {\n            // Are there any notifications? (prevent accidential errors)\n            const numberOfNotifications = this.notifications.length;\n            if (numberOfNotifications === 0) {\n                resolve(); // Done\n                return;\n            }\n            // Are animations enabled?\n            if (this.config.animations.enabled &&\n                this.config.animations.hide.speed > 0 &&\n                this.config.animations.hide.offset !== false &&\n                this.config.animations.hide.offset > 0) {\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    const animationOffset = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n                    setTimeout(() => {\n                        this.notifications[i].component.hide().then(() => {\n                            // Are we done here, was this the last notification to be hidden?\n                            if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                                this.removeAllNotificationsFromList();\n                                resolve(); // Done\n                            }\n                        });\n                    }, this.config.animations.hide.offset * animationOffset);\n                }\n            }\n            else {\n                const stepPromises = [];\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    stepPromises.push(this.notifications[i].component.hide());\n                }\n                Promise.all(stepPromises).then(() => {\n                    this.removeAllNotificationsFromList();\n                    resolve(); // Done\n                });\n            }\n        });\n    }\n    /**\n     * Shift multiple notifications at once\n     *\n     * @param   notifications List containing the notifications to be shifted\n     * @param   distance      Distance to shift (in px)\n     * @param   toMakePlace   Flag, defining in which direciton to shift\n     * @returns Promise, resolved when done\n     */\n    shiftNotifications(notifications, distance, toMakePlace) {\n        return new Promise((resolve) => {\n            // Are there any notifications to shift?\n            if (notifications.length === 0) {\n                resolve();\n                return;\n            }\n            const notificationPromises = [];\n            for (let i = notifications.length - 1; i >= 0; i--) {\n                notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n            }\n            Promise.all(notificationPromises).then(resolve); // Done\n        });\n    }\n    /**\n     * Add a new notification to the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to add to the list of notifications\n     */\n    addNotificationToList(notification) {\n        this.notifications.push(notification);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove an existing notification from the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to be removed from the list of notifications\n     */\n    removeNotificationFromList(notification) {\n        this.notifications = this.notifications.filter((item) => item.component !== notification.component);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove all notifications from the list (triggers change detection)\n     */\n    removeAllNotificationsFromList() {\n        this.notifications = [];\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Helper: Find a notification in the notification list by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding notification\n     * @returns Notification, undefined if not found\n     */\n    findNotificationById(notificationId) {\n        return this.notifications.find((currentNotification) => currentNotification.id === notificationId);\n    }\n    /**\n     * Helper: Find a notification's index by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding a notification's index\n     * @returns Notification index, undefined if not found\n     */\n    findNotificationIndexById(notificationId) {\n        const notificationIndex = this.notifications.findIndex((currentNotification) => currentNotification.id === notificationId);\n        return notificationIndex !== -1 ? notificationIndex : undefined;\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierContainerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: NotifierQueueService }, { token: NotifierService }], target: i0.\u0275\u0275FactoryTarget.Component }); }\n    static { this.\u0275cmp = i0.\u0275\u0275ngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.4\", type: NotifierContainerComponent, selector: \"notifier-container\", host: { classAttribute: \"notifier__container\" }, ngImport: i0, template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\", dependencies: [{ kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: NotifierNotificationComponent, selector: \"notifier-notification\", inputs: [\"notification\"], outputs: [\"ready\", \"dismiss\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierContainerComponent, decorators: [{\n            type: Component,\n            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        class: 'notifier__container',\n                    }, selector: 'notifier-container', template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NotifierQueueService }, { type: NotifierService }]; } });\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nfunction notifierCustomConfigFactory(options) {\n    return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nfunction notifierDefaultConfigFactory() {\n    return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nclass NotifierModule {\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param   [options={}] - Custom notifier options\n     * @returns - Notifier module with custom providers\n     */\n    static withConfig(options = {}) {\n        return {\n            ngModule: NotifierModule,\n            providers: [\n                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                {\n                    provide: NotifierOptionsToken,\n                    useValue: options,\n                },\n                // Provide a custom notifier configuration, based on the given notifier options\n                {\n                    deps: [NotifierOptionsToken],\n                    provide: NotifierConfigToken,\n                    useFactory: notifierCustomConfigFactory,\n                },\n            ],\n        };\n    }\n    static { this.\u0275fac = i0.\u0275\u0275ngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierModule, deps: [], target: i0.\u0275\u0275FactoryTarget.NgModule }); }\n    static { this.\u0275mod = i0.\u0275\u0275ngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierModule, declarations: [NotifierContainerComponent, NotifierNotificationComponent], imports: [CommonModule], exports: [NotifierContainerComponent] }); }\n    static { this.\u0275inj = i0.\u0275\u0275ngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierModule, providers: [\n            NotifierAnimationService,\n            NotifierService,\n            NotifierQueueService,\n            // Provide the default notifier configuration if just the module is imported\n            {\n                provide: NotifierConfigToken,\n                useFactory: notifierDefaultConfigFactory,\n            },\n        ], imports: [CommonModule] }); }\n}\ni0.\u0275\u0275ngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: NotifierModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n                    exports: [NotifierContainerComponent],\n                    imports: [CommonModule],\n                    providers: [\n                        NotifierAnimationService,\n                        NotifierService,\n                        NotifierQueueService,\n                        // Provide the default notifier configuration if just the module is imported\n                        {\n                            provide: NotifierConfigToken,\n                            useFactory: notifierDefaultConfigFactory,\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory };\n//# sourceMappingURL=angular-notifier.mjs.map\n"],
  "mappings": "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",
  "names": []
}
