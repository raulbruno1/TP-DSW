b56b6587ff55aa716f2ed937a7d88c12
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const inscripciondata_service_1 = require("./inscripciondata.service");
describe('InscriptionDataService', () => {
    let service;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            providers: [inscripciondata_service_1.InscriptionDataService]
        });
        service = testing_1.TestBed.inject(inscripciondata_service_1.InscriptionDataService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify(); // Ensure that there are no outstanding requests.
    });
    it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {
        // Arrange
        const student_id = '123';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'InscripciÃ³n creada exitosamente', data: {} };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(service['apiUrl']);
        expect(req.request.method).toBe('POST');
        expect(req.request.body.data).not.toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should return an Observable with the expected inscription data when a valid student_id is provided', () => {
        // Arrange
        const student_id = 'valid_student_id';
        const expectedResponse = { /* your expected response here */};
        // Act
        const result$ = service.getInscriptionByStudentId(student_id);
        // Assert
        result$.subscribe(response => {
            expect(response).toEqual(expectedResponse);
        });
        const req = httpMock.expectOne(`${service['apiUrl']}/alumno/${student_id}`);
        expect(req.request.method).toBe('GET');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should send a DELETE request to the correct API endpoint with the given inscription ID', () => {
        // Arrange
        const inscID = '123';
        const expectedResponse = { message: 'Inscripcion Eliminada' };
        // Act
        const result$ = service.deleteInscriptionById(inscID);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcc2VydmljZXNcXGluc2NyaXBjaW9uZGF0YS5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBQzlGLHVFQUFtRTtBQUVuRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLFFBQStCLENBQUM7SUFHcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7WUFDbEMsU0FBUyxFQUFFLENBQUMsZ0RBQXNCLENBQUM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdEQUFzQixDQUFDLENBQUM7UUFDakQsUUFBUSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsaURBQWlEO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtHQUFrRyxFQUFFLEdBQUcsRUFBRTtRQUMxRyxVQUFVO1FBQ1YsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN4QixNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUVsRixNQUFNO1FBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFaEYsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLHVDQUF1QztJQUN0RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvR0FBb0csRUFBRSxHQUFHLEVBQUU7UUFDNUcsVUFBVTtRQUNWLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixDQUFDO1FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxpQ0FBaUMsQ0FBRSxDQUFDO1FBRS9ELE1BQU07UUFDTixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUQsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0ZBQXdGLEVBQUUsR0FBRyxFQUFFO1FBQ2hHLFVBQVU7UUFDVixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDckIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBQyxDQUFBO1FBRTVELE1BQU07UUFDTixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEQsU0FBUztRQUNULE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXEp1bGnDoW5cXERlc2t0b3BcXGZyb250XFxmcm9udGVuZC1hcHBcXHNyY1xcYXBwXFxzZXJ2aWNlc1xcaW5zY3JpcGNpb25kYXRhLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XHJcbmltcG9ydCB7IEluc2NyaXB0aW9uRGF0YVNlcnZpY2UgfSBmcm9tICcuL2luc2NyaXBjaW9uZGF0YS5zZXJ2aWNlJztcclxuXHJcbmRlc2NyaWJlKCdJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlJywgKCkgPT4ge1xyXG4gIGxldCBzZXJ2aWNlOiBJbnNjcmlwdGlvbkRhdGFTZXJ2aWNlO1xyXG4gIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xyXG4gIFxyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGltcG9ydHM6IFtIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sXHJcbiAgICAgIHByb3ZpZGVyczogW0luc2NyaXB0aW9uRGF0YVNlcnZpY2VdXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KEluc2NyaXB0aW9uRGF0YVNlcnZpY2UpO1xyXG4gICAgaHR0cE1vY2sgPSBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpO1xyXG4gIH0pO1xyXG5cclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgaHR0cE1vY2sudmVyaWZ5KCk7IC8vIEVuc3VyZSB0aGF0IHRoZXJlIGFyZSBubyBvdXRzdGFuZGluZyByZXF1ZXN0cy5cclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCBhZGQgYSBuZXcgaW5zY3JpcHRpb24gd2hlbiB2YWxpZCBzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGFuZCBpbnNjcmlwdGlvbl9kYXRlIGFyZSBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIC8vIEFycmFuZ2VcclxuICAgIGNvbnN0IHN0dWRlbnRfaWQgPSAnMTIzJztcclxuICAgIGNvbnN0IGNvdXJzZV9pZCA9ICc0NTYnO1xyXG4gICAgY29uc3QgaW5zY3JpcHRpb25fZGF0ZSA9ICcyMDI0LTAzLTEzJztcclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0geyBzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGluc2NyaXB0aW9uX2RhdGUgfTtcclxuICAgIGNvbnN0IGV4cGVjdGVkUmVzcG9uc2UgPSB7IG1lc3NhZ2U6ICdJbnNjcmlwY2nDs24gY3JlYWRhIGV4aXRvc2FtZW50ZScsIGRhdGE6IHt9IH07XHJcblxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2VydmljZS5hZGRJbnNjcmlwdGlvbihzdHVkZW50X2lkLCBjb3Vyc2VfaWQsIGluc2NyaXB0aW9uX2RhdGUpO1xyXG5cclxuICAgIC8vIEFzc2VydFxyXG4gICAgcmVzdWx0JC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5tZXNzYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoc2VydmljZVsnYXBpVXJsJ10pOyBcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ1BPU1QnKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5ib2R5LmRhdGEpLm5vdC50b0JlTnVsbCgpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyAvLyBTaW11bGF0ZSBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci5cclxuICB9KTtcclxuXHJcbiAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gT2JzZXJ2YWJsZSB3aXRoIHRoZSBleHBlY3RlZCBpbnNjcmlwdGlvbiBkYXRhIHdoZW4gYSB2YWxpZCBzdHVkZW50X2lkIGlzIHByb3ZpZGVkJywgKCkgPT4ge1xyXG4gICAgLy8gQXJyYW5nZVxyXG4gICAgY29uc3Qgc3R1ZGVudF9pZCA9ICd2YWxpZF9zdHVkZW50X2lkJztcclxuICAgIGNvbnN0IGV4cGVjdGVkUmVzcG9uc2UgPSB7IC8qIHlvdXIgZXhwZWN0ZWQgcmVzcG9uc2UgaGVyZSAqLyB9O1xyXG4gIFxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2VydmljZS5nZXRJbnNjcmlwdGlvbkJ5U3R1ZGVudElkKHN0dWRlbnRfaWQpO1xyXG4gIFxyXG4gICAgLy8gQXNzZXJ0XHJcbiAgICByZXN1bHQkLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XHJcbiAgICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbChleHBlY3RlZFJlc3BvbnNlKTtcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKGAke3NlcnZpY2VbJ2FwaVVybCddfS9hbHVtbm8vJHtzdHVkZW50X2lkfWApO1xyXG4gICAgZXhwZWN0KHJlcS5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnR0VUJyk7XHJcbiAgICByZXEuZmx1c2goZXhwZWN0ZWRSZXNwb25zZSk7IC8vIFByb3ZpZGUgYSBtb2NrZWQgcmVzcG9uc2UgZm9yIHRoZSByZXF1ZXN0LlxyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHNlbmQgYSBERUxFVEUgcmVxdWVzdCB0byB0aGUgY29ycmVjdCBBUEkgZW5kcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gaW5zY3JpcHRpb24gSUQnLCAoKSA9PiB7XHJcbiAgICAvLyBBcnJhbmdlXHJcbiAgICBjb25zdCBpbnNjSUQgPSAnMTIzJztcclxuICAgIGNvbnN0IGV4cGVjdGVkUmVzcG9uc2UgPSB7IG1lc3NhZ2U6ICdJbnNjcmlwY2lvbiBFbGltaW5hZGEnfVxyXG4gIFxyXG4gICAgLy8gQWN0XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2VydmljZS5kZWxldGVJbnNjcmlwdGlvbkJ5SWQoaW5zY0lEKTtcclxuICBcclxuICAgIC8vIEFzc2VydFxyXG4gICAgcmVzdWx0JC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXNwb25zZS5tZXNzYWdlKS50b0VxdWFsKGV4cGVjdGVkUmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICB9KTtcclxuICBcclxuICAgIGNvbnN0IHJlcSA9IGh0dHBNb2NrLmV4cGVjdE9uZSgoKSA9PiB0cnVlKTtcclxuICAgIGV4cGVjdChyZXEucmVxdWVzdC5tZXRob2QpLnRvQmUoJ0RFTEVURScpO1xyXG4gICAgcmVxLmZsdXNoKGV4cGVjdGVkUmVzcG9uc2UpOyAvLyBQcm92aWRlIGEgbW9ja2VkIHJlc3BvbnNlIGZvciB0aGUgcmVxdWVzdC5cclxuICB9KTtcclxufSk7Il0sInZlcnNpb24iOjN9