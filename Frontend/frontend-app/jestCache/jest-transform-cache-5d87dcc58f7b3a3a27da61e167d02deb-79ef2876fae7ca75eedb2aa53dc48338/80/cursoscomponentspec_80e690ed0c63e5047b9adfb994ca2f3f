f1bd8f8acce22ca40b3bcc985edfeb40
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const cursos_component_1 = require("./cursos.component");
const materiadata_service_mock_1 = require("src/app/mocks/materiadata.service.mock");
const materiadata_service_1 = require("src/app/services/materiadata.service");
const dialog_service_mock_1 = require("src/app/mocks/dialog.service.mock");
const dialog_service_1 = require("src/app/services/dialog.service");
const http_1 = require("@angular/common/http/");
const httpMock = { get: jest.fn() };
describe('CursosComponent', () => {
    let component;
    let fixture;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            declarations: [cursos_component_1.CursosComponent],
            providers: [{ provide: materiadata_service_1.CoursedataService, useClass: materiadata_service_mock_1.CoursedataServiceMock },
                { provide: dialog_service_1.DialogService, useClass: dialog_service_mock_1.DialogServiceMock },
                { provide: http_1.HttpClient, useValue: httpMock }]
        }).compileComponents();
        fixture = testing_1.TestBed.createComponent(cursos_component_1.CursosComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should create', () => {
        expect(component).toBeTruthy();
    });
    it('should have "all" as the default selected category', () => {
        expect(component.selected_category).toEqual('all');
    });
    it('should filter courses by category', () => {
        const category = 'math';
        component.filterByCategory(category);
        expect(component.courses).toEqual(component.original_courses.filter((course) => course.category === category));
    });
    it('should show all courses when ShowAll is called', () => {
        component.ShowAll();
        expect(component.courses).toEqual(component.original_courses);
    });
    it('should reset selected category and courses when restart is called', () => {
        component.restart();
        expect(component.selected_category).toEqual('all');
        expect(component.courses).toEqual(component.original_courses);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcY29tcG9uZW50c1xcY3Vyc29zXFxjdXJzb3MuY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBa0U7QUFDbEUseURBQXFEO0FBQ3JELHFGQUErRTtBQUMvRSw4RUFBeUU7QUFDekUsMkVBQXNFO0FBQ3RFLG9FQUFnRTtBQUNoRSxnREFBbUQ7QUFFbkQsTUFBTSxRQUFRLEdBQUcsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFFbEMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLFNBQTBCLENBQUM7SUFDL0IsSUFBSSxPQUEwQyxDQUFDO0lBRS9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzdCLFlBQVksRUFBRSxDQUFDLGtDQUFlLENBQUM7WUFDL0IsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsdUNBQWlCLEVBQUUsUUFBUSxFQUFFLGdEQUFxQixFQUFDO2dCQUM3RCxFQUFDLE9BQU8sRUFBRSw4QkFBYSxFQUFFLFFBQVEsRUFBRSx1Q0FBaUIsRUFBQztnQkFDdkQsRUFBQyxPQUFPLEVBQUUsaUJBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLENBQUM7U0FDckQsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGtDQUFlLENBQUMsQ0FBQztRQUNuRCxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ3RDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7UUFDNUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBNkIsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3hJLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtRQUN4RCxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1FBQzNFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKdWxpw6FuXFxEZXNrdG9wXFxmcm9udFxcZnJvbnRlbmQtYXBwXFxzcmNcXGFwcFxcY29tcG9uZW50c1xcY3Vyc29zXFxjdXJzb3MuY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XHJcbmltcG9ydCB7IEN1cnNvc0NvbXBvbmVudCB9IGZyb20gJy4vY3Vyc29zLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvdXJzZWRhdGFTZXJ2aWNlTW9jayB9IGZyb20gJ3NyYy9hcHAvbW9ja3MvbWF0ZXJpYWRhdGEuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgQ291cnNlZGF0YVNlcnZpY2UgfSBmcm9tICdzcmMvYXBwL3NlcnZpY2VzL21hdGVyaWFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlTW9jayB9IGZyb20gJ3NyYy9hcHAvbW9ja3MvZGlhbG9nLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdzcmMvYXBwL3NlcnZpY2VzL2RpYWxvZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwLyc7XHJcblxyXG5jb25zdCBodHRwTW9jayA9IHtnZXQ6IGplc3QuZm4oKX07XHJcblxyXG5kZXNjcmliZSgnQ3Vyc29zQ29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGxldCBjb21wb25lbnQ6IEN1cnNvc0NvbXBvbmVudDtcclxuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxDdXJzb3NDb21wb25lbnQ+O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGRlY2xhcmF0aW9uczogW0N1cnNvc0NvbXBvbmVudF0sXHJcbiAgICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBDb3Vyc2VkYXRhU2VydmljZSwgdXNlQ2xhc3M6IENvdXJzZWRhdGFTZXJ2aWNlTW9ja30sXHJcbiAgICAgICAgICAgICAgICAgIHtwcm92aWRlOiBEaWFsb2dTZXJ2aWNlLCB1c2VDbGFzczogRGlhbG9nU2VydmljZU1vY2t9LFxyXG4gICAgICAgICAgICAgICAge3Byb3ZpZGU6IEh0dHBDbGllbnQsIHVzZVZhbHVlOiBodHRwTW9ja31dXHJcbiAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xyXG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEN1cnNvc0NvbXBvbmVudCk7XHJcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGhhdmUgXCJhbGxcIiBhcyB0aGUgZGVmYXVsdCBzZWxlY3RlZCBjYXRlZ29yeScsICgpID0+IHtcclxuICAgIGV4cGVjdChjb21wb25lbnQuc2VsZWN0ZWRfY2F0ZWdvcnkpLnRvRXF1YWwoJ2FsbCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGZpbHRlciBjb3Vyc2VzIGJ5IGNhdGVnb3J5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgY2F0ZWdvcnkgPSAnbWF0aCc7XHJcbiAgICBjb21wb25lbnQuZmlsdGVyQnlDYXRlZ29yeShjYXRlZ29yeSk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMuZmlsdGVyKChjb3Vyc2U6IHsgY2F0ZWdvcnk6IHN0cmluZzsgfSkgPT4gY291cnNlLmNhdGVnb3J5ID09PSBjYXRlZ29yeSkpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHNob3cgYWxsIGNvdXJzZXMgd2hlbiBTaG93QWxsIGlzIGNhbGxlZCcsICgpID0+IHtcclxuICAgIGNvbXBvbmVudC5TaG93QWxsKCk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIHJlc2V0IHNlbGVjdGVkIGNhdGVnb3J5IGFuZCBjb3Vyc2VzIHdoZW4gcmVzdGFydCBpcyBjYWxsZWQnLCAoKSA9PiB7XHJcbiAgICBjb21wb25lbnQucmVzdGFydCgpO1xyXG4gICAgZXhwZWN0KGNvbXBvbmVudC5zZWxlY3RlZF9jYXRlZ29yeSkudG9FcXVhbCgnYWxsJyk7XHJcbiAgICBleHBlY3QoY29tcG9uZW50LmNvdXJzZXMpLnRvRXF1YWwoY29tcG9uZW50Lm9yaWdpbmFsX2NvdXJzZXMpO1xyXG4gIH0pO1xyXG59KTsiXSwidmVyc2lvbiI6M30=