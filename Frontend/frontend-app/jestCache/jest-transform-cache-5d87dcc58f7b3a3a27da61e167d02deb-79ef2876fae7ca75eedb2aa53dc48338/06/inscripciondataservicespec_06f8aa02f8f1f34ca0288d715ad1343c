e04e37fecb93fb01e5852affef38e016
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const inscripciondata_service_1 = require("./inscripciondata.service");
describe('InscriptionDataService', () => {
    let service;
    let httpMock;
    beforeEach(() => {
        testing_1.TestBed.configureTestingModule({
            imports: [testing_2.HttpClientTestingModule],
            providers: [inscripciondata_service_1.InscriptionDataService]
        });
        service = testing_1.TestBed.inject(inscripciondata_service_1.InscriptionDataService);
        httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);
    });
    afterEach(() => {
        httpMock.verify(); // Ensure that there are no outstanding requests.
    });
    it('should add a new inscription when valid student_id, course_id, and inscription_date are provided', () => {
        // Arrange
        const student_id = '123';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'Inscripción creada exitosamente', data: {} };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('POST');
        expect(req.request.body.data).not.toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should not add a new inscription when an invalid student_id is provided', () => {
        // Arrange
        const student_id = 'invalid_student_id';
        const course_id = '456';
        const inscription_date = '2024-03-13';
        const requestBody = { student_id, course_id, inscription_date };
        const expectedResponse = { message: 'Error al crear la inscripción', data: null };
        // Act
        const result$ = service.addInscription(student_id, course_id, inscription_date);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.body.data).toBeNull();
        req.flush(expectedResponse); // Simulate a response from the server.
    });
    it('should return an Observable with the expected inscription data when a valid student_id is provided', () => {
        // Arrange
        const student_id = 'valid_student_id';
        const expectedResponse = { /* your expected response here */};
        // Act
        const result$ = service.getInscriptionByStudentId(student_id);
        // Assert
        result$.subscribe(response => {
            expect(response).toEqual(expectedResponse);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('GET');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
    it('should throw an error if the API call fails', () => {
        // Arrange
        const student_id = 'valid_student_id';
        // Act
        const result = service.getInscriptionByStudentId(student_id);
        // Assert
        result.subscribe({
            error: err => {
                expect(err).toBeDefined();
            }
        });
    });
    it('should send a DELETE request to the correct API endpoint with the given inscription ID', () => {
        // Arrange
        const inscID = '123';
        const expectedResponse = { message: 'Inscripcion Eliminada' };
        // Act
        const result$ = service.deleteInscriptionById(inscID);
        // Assert
        result$.subscribe(response => {
            expect(response.message).toEqual(expectedResponse.message);
        });
        const req = httpMock.expectOne(() => true);
        expect(req.request.method).toBe('DELETE');
        req.flush(expectedResponse); // Provide a mocked response for the request.
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,